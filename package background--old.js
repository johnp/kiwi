// Generated by CoffeeScript 1.9.0
(function() {
  var CLEANUP_INTERVAL, checkForUrlHourInterval, checkForUrl_Persistent_ChromeNotification_HourInterval, check_updateServiceResults, defaultServicesInfo, defaultUserPreferences, dispatchQuery, getUrlResults_to_refreshBadgeIcon, initIfNewURL, initialize, lastInitUrl, last_periodicCleanup, maxUrlResultsStoredInLocalStorage, parseResults, periodicCleanup, popupOpen, popupParcel, refreshBadge, researchMode, returnNumberOfActiveServices, sendParcel, setPreppedServiceResults, tabUrl, tempResponsesStore, updateBadgeText, urlsResultsCache, _save_url_results, _set_popupParcel;

  console.log('wtf');

  tabUrl = '';

  popupOpen = false;

  researchMode = true;

  checkForUrlHourInterval = 16;

  checkForUrl_Persistent_ChromeNotification_HourInterval = 3;

  last_periodicCleanup = 0;

  CLEANUP_INTERVAL = 3 * 3600000;

  maxUrlResultsStoredInLocalStorage = 800;

  urlsResultsCache = {};

  tempResponsesStore = {};

  popupParcel = {};

  defaultUserPreferences = {
    urlSubstring_blacklist: ['www.facebook.', 'news.ycombinator.', 'www.google.', 'chrome://'],
    researchMode: true
  };

  defaultServicesInfo = [
    {
      name: "reddit",
      title: "Reddit",
      abbreviation: "R",
      queryApi: "https://www.reddit.com/submit.json?url=",
      broughtToYouByTitle: "Reddit API",
      broughtToYouByURL: "https://github.com/reddit/reddit/wiki/API",
      active: true,
      conditionsForCaps: {
        hoursSincePosted: 5,
        num_comments: 30
      },
      updateBadgeOnlyWithExactMatch: true
    }, {
      name: "hackerNews",
      title: "Hacker News",
      abbreviation: "H",
      queryApi: "https://hn.algolia.com/api/v1/search?restrictSearchableAttributes=url&query=",
      broughtToYouByTitle: "Algolia Hacker News API",
      broughtToYouByURL: "https://hn.algolia.com/api",
      active: true,
      conditionsForCaps: {
        hoursSincePosted: 5,
        num_comments: 10
      },
      updateBadgeOnlyWithExactMatch: true
    }
  ];

  returnNumberOfActiveServices = function(servicesInfo) {
    var numberOfActiveServices, service, _i, _len;
    numberOfActiveServices = 0;
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (service.active) {
        numberOfActiveServices++;
      }
    }
    return numberOfActiveServices;
  };

  sendParcel = function(parcel) {
    var outPort;
    outPort = chrome.extension.connect({
      name: "kiwi_fromBackgroundToPopup"
    });
    if ((parcel.msg == null) || (parcel.forUrl == null)) {
      return false;
    }
    switch (parcel.msg) {
      case 'kiwiPP_popupParcel_ready':
        return outPort.postMessage(parcel);
    }
  };

  chrome.extension.onConnect.addListener(function(port) {
    if (port.name === 'kiwi_fromBackgroundToPopup') {
      return port.onMessage.addListener(function(dataFromPopup) {
        var parcel;
        if (dataFromPopup.msg == null) {
          return false;
        }
        switch (dataFromPopup.msg) {
          case 'kiwiPP_post_addAlert':
            return popupOpen = true;
          case 'kiwiPP_post_refreshQuery':
            return popupOpen = true;
          case 'kiwiPP_request_popupParcel':
            console.log(" when 'kiwiPP_request_popupParcel' ");
            popupOpen = true;
            console.log(dataFromPopup.forUrl);
            console.log(tabUrl);
            if (dataFromPopup.forUrl === tabUrl) {
              if ((popupParcel != null) && popupParcel.forUrl === tabUrl) {
                console.log('parcel is ready for tabUrl' + tabUrl);
                parcel = {};
                parcel.msg = 'kiwiPP_popupParcel_ready';
                parcel.forUrl = tabUrl;
                parcel.popupParcel = popupParcel;
                return sendParcel(parcel);
              } else {
                console.log('parcel is Not ready for tabUrl, must be set' + tabUrl);
                if (tempResponsesStore.services == null) {
                  return _set_popupParcel({}, tabUrl, true);
                } else {
                  return _set_popupParcel(tempResponsesStore.services, tabUrl, true);
                }
              }
            }
        }
      });
    }
  });

  initialize = function(currentUrl) {
    console.log('yolo 1 ' + currentUrl);
    return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
      console.log('console.debug allItemsInLocalStorage');
      console.debug(allItemsInLocalStorage);
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        return chrome.storage.sync.set({
          'kiwi_servicesInfo': defaultServicesInfo
        }, function(servicesInfo) {
          return getUrlResults_to_refreshBadgeIcon(allItemsInLocalStorage, allItemsInSyncedStorage['kiwi_servicesInfo'], currentUrl);
        });
      } else {
        return getUrlResults_to_refreshBadgeIcon(allItemsInLocalStorage, allItemsInSyncedStorage['kiwi_servicesInfo'], currentUrl);
      }
    });
  };

  getUrlResults_to_refreshBadgeIcon = function(allItemsInLocalStorage, servicesInfo, currentUrl) {
    var currentTime, sendPopupParcel, service, _i, _len;
    console.log('yolo 2  getUrlResults_to_refreshBadgeIcon');
    currentTime = Date.now();
    if (allItemsInLocalStorage['kiwi_urlsResultsCache'] != null) {
      if (allItemsInLocalStorage['kiwi_urlsResultsCache'][currentUrl] != null) {
        refreshBadge(servicesInfo, allItemsInLocalStorage['kiwi_urlsResultsCache'][currentUrl]);
        for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
          service = servicesInfo[_i];
          if (allItemsInLocalStorage['kiwi_urlsResultsCache'][currentUrl][service.name] != null) {
            if ((currentTime - allItemsInLocalStorage['kiwi_urlsResultsCache'][currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
              check_updateServiceResults(servicesInfo, currentUrl, allItemsInLocalStorage['kiwi_urlsResultsCache']);
              return 0;
            }
          } else {
            check_updateServiceResults(servicesInfo, currentUrl, allItemsInLocalStorage['kiwi_urlsResultsCache']);
            return 0;
          }
        }
        tempResponsesStore.forUrl = currentUrl;
        tempResponsesStore.services = allItemsInLocalStorage['kiwi_urlsResultsCache'][currentUrl];
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        return _set_popupParcel(tempResponsesStore.services, currentUrl, sendPopupParcel);
      } else {
        return check_updateServiceResults(servicesInfo, currentUrl, allItemsInLocalStorage['kiwi_urlsResultsCache']);
      }
    } else {
      return check_updateServiceResults(servicesInfo, currentUrl, null);
    }
  };

  _save_url_results = function(servicesInfo, tempResponsesStore, urlsResultsCache) {
    var changedBool, debugResultsCache_beforeUpdate, previousUrl, service, _i, _len;
    console.log('yolo 3');
    debugResultsCache_beforeUpdate = _.extend({}, urlsResultsCache);
    previousUrl = tempResponsesStore.forUrl;
    if (urlsResultsCache[previousUrl] != null) {
      changedBool = false;
      for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
        service = servicesInfo[_i];
        if (tempResponsesStore.services[service.name] != null) {
          changedBool = true;
          urlsResultsCache[previousUrl][service.name] = {
            forUrl: previousUrl,
            timestamp: tempResponsesStore.services[service.name].timestamp,
            service_PreppedResults: tempResponsesStore.services[service.name].service_PreppedResults
          };
        }
      }
      if (changedBool) {
        return chrome.storage.local.set({
          'kiwi_urlsResultsCache': urlsResultsCache
        }, function() {
          console.log('urls results cache before update ');
          console.debug(debugResultsCache_beforeUpdate);
          console.log('urls results cache after update ');
          console.debug(urlsResultsCache);
          console.log('tempResponsesStore.services[service.name]');
          return console.debug(tempResponsesStore.services[service.name]);
        });
      }
    } else {
      urlsResultsCache[previousUrl] = {};
      urlsResultsCache[previousUrl] = tempResponsesStore.services;
      return chrome.storage.local.set({
        'kiwi_urlsResultsCache': urlsResultsCache
      }, function() {
        console.log('this was the first .set of urlsResults cache');
        console.log('for url ' + previousUrl);
        console.log('console.debug urlsResultsCache');
        return console.debug(urlsResultsCache);
      });
    }
  };

  check_updateServiceResults = function(servicesInfo, currentUrl, urlsResultsCache) {
    var currentTime, previousResponsesStore, service, _i, _len, _results, _urlsResultsCache;
    if (urlsResultsCache == null) {
      urlsResultsCache = null;
    }
    console.log('yolo 4');
    if ((urlsResultsCache != null) && Object.keys(tempResponsesStore).length > 0) {
      previousResponsesStore = _.extend({}, tempResponsesStore);
      _urlsResultsCache = _.extend({}, urlsResultsCache);
      _save_url_results(servicesInfo, previousResponsesStore, _urlsResultsCache);
    }
    tempResponsesStore.forUrl = currentUrl;
    tempResponsesStore.services = {};
    currentTime = Date.now();
    if (urlsResultsCache == null) {
      urlsResultsCache = {};
    }
    if (urlsResultsCache[currentUrl] == null) {
      urlsResultsCache[currentUrl] = {};
    }
    console.log('about to check for dispatch query');
    console.debug(urlsResultsCache[currentUrl]);
    console.log('current time');
    console.log(currentTime);
    _results = [];
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (urlsResultsCache[currentUrl][service.name] != null) {
        if ((currentTime - urlsResultsCache[currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
          _results.push(dispatchQuery(service, currentUrl, servicesInfo));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(dispatchQuery(service, currentUrl, servicesInfo));
      }
    }
    return _results;
  };

  dispatchQuery = function(service_info, currentUrl, servicesInfo) {
    var queryUrl;
    console.log('yolo 5');
    queryUrl = service_info.queryApi + encodeURIComponent(currentUrl);
    console.log('yolo 5 ' + queryUrl);
    return $.ajax(queryUrl, {
      success: function(queryResult) {
        var responsePackage;
        responsePackage = {
          forUrl: currentUrl,
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: queryResult
        };
        console.log('responsePackage');
        console.debug(responsePackage);
        return setPreppedServiceResults(responsePackage, servicesInfo);
      }
    });
  };

  _set_popupParcel = function(setWith_urlResults, forUrl, sendPopupParcel) {
    var setObj_popupParcel;
    console.log('trying to set popupParcel, forUrl tabUrl');
    console.log(forUrl);
    console.log(tabUrl);
    if (forUrl !== tabUrl) {
      console.log("_set_popupParcel request for old url");
      return false;
    }
    setObj_popupParcel = {};
    setObj_popupParcel.forUrl = tabUrl;
    return chrome.storage.sync.get(null, function(allItemsInLocalStorage) {
      var parcel;
      if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
        setObj_popupParcel.userPrefs = defaultUserPreferences;
      } else {
        setObj_popupParcel.userPrefs = allItemsInSyncedStorage['kiwi_userPreferences'];
      }
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        setObj_popupParcel.servicesInfo = defaultServicesInfo;
      } else {
        setObj_popupParcel.servicesInfo = allItemsInSyncedStorage['kiwi_servicesInfo'];
      }
      if (allItemsInSyncedStorage['kiwi_alerts'] == null) {
        setObj_popupParcel.alerts = [];
      } else {
        setObj_popupParcel.alerts = allItemsInSyncedStorage['kiwi_alerts'];
      }
      if (setWith_urlResults == null) {
        console.log('_set_popupParcel called with undefined responses (not supposed to happen, ever)');
        return 0;
      } else {
        setObj_popupParcel.allPreppedResults = setWith_urlResults;
      }
      popupParcel = setObj_popupParcel;
      console.debug(popupParcel);
      if (sendPopupParcel) {
        parcel = {};
        parcel.msg = 'kiwiPP_popupParcel_ready';
        parcel.forUrl = tabUrl;
        parcel.popupParcel = setObj_popupParcel;
        return sendParcel(parcel);
      }
    });
  };

  setPreppedServiceResults = function(responsePackage, servicesInfo) {
    var currentTime, numberOfActiveServices, sendPopupParcel, service_PreppedResults;
    console.log('yolo 6');
    currentTime = Date.now();
    if (tabUrl === responsePackage.forUrl) {
      service_PreppedResults = parseResults[responsePackage.serviceName](responsePackage.queryResult, responsePackage.forUrl);
      tempResponsesStore.services[responsePackage.serviceName] = {
        timestamp: currentTime,
        service_PreppedResults: service_PreppedResults,
        forUrl: responsePackage.forUrl
      };
      console.log('yolo 6 results service_PreppedResults');
      console.debug(service_PreppedResults);
      console.log('Object.keys(tempResponsesStore.services).length');
      console.debug(Object.keys(tempResponsesStore.services).length);
      console.log('numberOfActiveServices');
      console.debug(returnNumberOfActiveServices(servicesInfo));
      numberOfActiveServices = returnNumberOfActiveServices(servicesInfo);
      refreshBadge(servicesInfo, tempResponsesStore.services);
      if (Object.keys(tempResponsesStore.services).length === numberOfActiveServices && numberOfActiveServices !== 0) {
        chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
          return chrome.storage.local.get(null, function(allItemsInLocalStorage) {
            console.log('trying to save all');
            if (allItemsInLocalStorage['kiwi_urlsResultsCache'] == null) {
              allItemsInLocalStorage['kiwi_urlsResultsCache'] = {};
            }
            return _save_url_results(allItemsInSyncedStorage['kiwi_servicesInfo'], tempResponsesStore, allItemsInLocalStorage['kiwi_urlsResultsCache']);
          });
        });
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        return _set_popupParcel(tempResponsesStore.services, responsePackage.forUrl, sendPopupParcel);
      }
    }
  };

  parseResults = {
    reddit: function(resultsObj, forUrl) {
      var child, listingKeys, matchedListings, preppedResult, _i, _len, _ref;
      matchedListings = [];
      console.log('reddit: (resultsObj) ->');
      console.debug(resultsObj);
      if ((resultsObj.kind != null) && resultsObj.kind === "Listing" && (resultsObj.data != null) && (resultsObj.data.children != null) && resultsObj.data.children.length > 0) {
        _ref = resultsObj.data.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.data != null) {
            listingKeys = ["subreddit", 'url', "score", "over_18", "author", "hidden", "downs", "permalink", "created", "title", "created_utc", "ups", "num_comments"];
            preppedResult = _.pick(child.data, listingKeys);
            if (forUrl === preppedResult.url) {
              preppedResult.kiwi_exact_match = true;
            } else {
              preppedResult.kiwi_exact_match = false;
            }
            preppedResult.kiwi_created_at = preppedResult.created_utc;
            matchedListings.push(preppedResult);
          }
        }
      }
      return matchedListings;
    },
    hackerNews: function(resultsObj, forUrl) {
      var hit, listingKeys, matchedListings, preppedResult, _i, _len, _ref;
      matchedListings = [];
      if ((resultsObj.nbHits != null) && resultsObj.nbHits > 0 && (resultsObj.hits != null) && resultsObj.hits.length === resultsObj.nbHits) {
        _ref = resultsObj.hits;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hit = _ref[_i];
          listingKeys = ["points", "num_comments", "objectID", "author", "created_at", "title", "url", "created_at_i"];
          preppedResult = _.pick(hit, listingKeys);
          preppedResult.kiwi_created_at = preppedResult.created_at_i;
          if (forUrl === preppedResult.url) {
            preppedResult.kiwi_exact_match = true;
          } else {
            preppedResult.kiwi_exact_match = false;
          }
          matchedListings.push(preppedResult);
        }
      }
      return matchedListings;
    }
  };

  refreshBadge = function(servicesInfo, resultsObjForCurrentUrl) {
    var badgeText, currentTime, exactMatch, index, listing, noteworthy, service, updateCount, _i, _j, _len, _len1, _ref;
    console.log('yolo 8');
    console.debug(resultsObjForCurrentUrl);
    badgeText = '';
    currentTime = Date.now();
    updateCount = 0;
    for (index = _i = 0, _len = servicesInfo.length; _i < _len; index = ++_i) {
      service = servicesInfo[index];
      if (resultsObjForCurrentUrl[service.name]) {
        if (resultsObjForCurrentUrl[service.name].service_PreppedResults.length > 0) {
          exactMatch = false;
          noteworthy = false;
          _ref = resultsObjForCurrentUrl[service.name].service_PreppedResults;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            listing = _ref[_j];
            if (listing.kiwi_exact_match) {
              exactMatch = true;
              if ((listing.num_comments != null) && listing.num_comments >= service.conditionsForCaps.num_comments) {
                noteworthy = true;
                break;
              }
              if ((currentTime - listing.kiwi_created_at) < service.conditionsForCaps.hoursSincePosted * 3600000) {
                noteworthy = true;
                break;
              }
            }
          }
          if (service.updateBadgeOnlyWithExactMatch && (exactMatch = false)) {
            break;
          }
          if (updateCount !== 0) {
            badgeText += " ";
          }
          if (noteworthy) {
            badgeText += service.abbreviation;
          } else {
            badgeText += service.abbreviation.toLowerCase();
          }
          updateCount++;
        }
      }
    }
    return updateBadgeText(badgeText);
  };

  updateBadgeText = function(text) {
    return chrome.browserAction.setBadgeText({
      'text': text.toString()
    });
  };

  periodicCleanup = function(tab, allItemsInLocalStorage, allItemsInSyncedStorage, initialize_callback) {
    var cull_kiwi_urlsResultsCache, currentTime, deletedCount, num_results_to_delete, serviceKey, serviceResults, url, urlServiceResults;
    console.log('wtf a');
    currentTime = Date.now();
    if (last_periodicCleanup < (currentTime - CLEANUP_INTERVAL)) {
      last_periodicCleanup = currentTime;
      console.log('wtf b');
      if ((allItemsInLocalStorage.kiwi_urlsResultsCache == null) || Object.keys(allItemsInLocalStorage.kiwi_urlsResultsCache).length === 0) {
        console.log('wtf ba');
        return initialize_callback(tab, allItemsInLocalStorage);
      } else {
        console.log('wtf bb');
        cull_kiwi_urlsResultsCache = _.extend({}, allItemsInLocalStorage.kiwi_urlsResultsCache);
        for (url in cull_kiwi_urlsResultsCache) {
          urlServiceResults = cull_kiwi_urlsResultsCache[url];
          for (serviceKey in urlServiceResults) {
            serviceResults = urlServiceResults[serviceKey];
            if (currentTime - serviceResults.timestamp > checkForUrlHourInterval) {
              delete allItemsInLocalStorage.kiwi_urlsResultsCache[url];
            }
          }
        }
        if (Object.keys(allItemsInLocalStorage.kiwi_urlsResultsCache).length > maxUrlResultsStoredInLocalStorage) {
          num_results_to_delete = Object.keys(allItemsInLocalStorage.kiwi_urlsResultsCache).length - maxUrlResultsStoredInLocalStorage;
          deletedCount = 0;
          cull_kiwi_urlsResultsCache = _.extend({}, allItemsInLocalStorage.kiwi_urlsResultsCache);
          for (url in cull_kiwi_urlsResultsCache) {
            urlServiceResults = cull_kiwi_urlsResultsCache[url];
            if (deleteCount >= num_results_to_delete) {
              break;
            }
            if (url !== tab.url) {
              delete allItemsInLocalStorage.kiwi_urlsResultsCache[url];
              deletedCount++;
            }
          }
          return chrome.storage.local.set({
            'kiwi_urlsResultsCache': allItemsInLocalStorage.kiwi_urlsResultsCache
          }, function() {
            return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
          });
        } else {
          return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
        }
      }
    } else {
      console.log('wtf c');
      return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
    }
  };

  lastInitUrl = '';

  initIfNewURL = function() {
    console.log('wtf 1');
    popupOpen = false;
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      if (tabs.length > 0 && (tabs[0].url != null)) {
        if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
          tabUrl = tabs[0].url;
        } else if (lastInitUrl !== '') {
          tabUrl = lastInitUrl;
        } else {
          console.log('chrome-devtools:// has been the only url visited so far');
          return 0;
        }
        if (lastInitUrl !== tabUrl) {
          lastInitUrl = tabUrl;
          console.log('popupParcel 123123');
          console.debug(popupParcel);
          updateBadgeText('');
          return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
            return chrome.storage.local.get(null, function(allItemsInLocalStorage) {
              return periodicCleanup(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage, function(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage) {
                var currentUrl, urlSubstring, _i, _len, _ref;
                console.log('in initialize callback');
                if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
                  chrome.storage.sync.set({
                    'kiwi_userPreferences': defaultUserPreferences
                  }, function() {
                    var urlSubstring, _i, _len, _ref;
                    _ref = defaultUserPreferences.urlSubstring_blacklist;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      urlSubstring = _ref[_i];
                      if (tabUrl.indexOf(urlSubstring) !== -1) {
                        return false;
                      }
                    }
                  });
                } else {
                  _ref = allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklist;
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    urlSubstring = _ref[_i];
                    if (tabUrl.indexOf(urlSubstring) !== -1) {
                      return false;
                    }
                  }
                }
                if ((allItemsInLocalStorage.persistentUrl == null) || allItemsInLocalStorage.persistentUrl !== tabUrl) {
                  chrome.storage.local.set({
                    'persistentUrl': tabUrl
                  }, function() {});
                }
                console.log('wtf 3 ' + tabUrl);
                if (document.readyState !== 'complete') {
                  currentUrl = tabUrl;
                  console.log('wtf 3a');
                  return $(document).ready(function() {
                    return initialize(currentUrl);
                  });
                } else {
                  console.log('wtf 3b');
                  return initialize(tabUrl);
                }
              });
            });
          });
        }
      }
    });
  };

  chrome.tabs.onActivated.addListener(initIfNewURL);

  chrome.tabs.onUpdated.addListener(initIfNewURL);

  chrome.windows.onFocusChanged.addListener(initIfNewURL);

}).call(this);

// Generated by CoffeeScript 1.9.0
(function() {
  var bindGoToViewButtons, capitalizeFirstLetter, formatTime, getRandom, htmlEntities, initialize, moveArrayElement, port, receiveParcel, renderExtensionHeight, renderedBool, sendParcel, showViewAndBindGoToViewButtons, tailorResults_returnHtml, unbindView, viewElementId, views,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  viewElementId = '';

  renderedBool = false;

  initialize = function(popupParcel) {
    console.log('in init');
    return views.userPreferences.render(popupParcel);
  };

  views = {
    conversations: {
      elsToUnbind: [],
      render: function(popupParcel) {
        var preppedHTMLstring, serviceInfoObject, serviceResults, viewName, _i, _len, _ref;
        viewName = 'conversations';
        console.log(' in conversations view');
        console.debug(popupParcel);
        unbindView(viewName);
        showViewAndBindGoToViewButtons(viewName, popupParcel);
        preppedHTMLstring = '';
        _ref = popupParcel.kiwi_servicesInfo;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          serviceInfoObject = _ref[_i];
          if (popupParcel.allPreppedResults[serviceInfoObject.name] != null) {
            if (popupParcel.allPreppedResults[serviceInfoObject.name] != null) {
              serviceResults = popupParcel.allPreppedResults[serviceInfoObject.name];
              preppedHTMLstring += tailorResults_returnHtml(serviceInfoObject, serviceResults);
            }
          }
        }
        $("#resultsByService").html(preppedHTMLstring);
        setTimeout(function() {
          renderExtensionHeight(viewName + 'View', 1);
          $($('a')[0]).blur();
          return $($('button')[0]).blur();
        }, 300);
        renderExtensionHeight(viewName + 'View', 1);
        $($('a')[0]).blur();
        return $($('button')[0]).blur();
      }
    },
    userPreferences: {
      elsToUnbind: [],
      render: function(popupParcel) {
        var activeCheck, autoOffTimerType, autoOffTimerValue, index, notActiveCheck, researchModeExpirationString, researchModeHtml, researchOffString, researchOnString, service, servicesHtml, viewName, _i, _len, _ref;
        viewName = 'userPreferences';
        unbindView(viewName);
        showViewAndBindGoToViewButtons(viewName, popupParcel);
        researchModeHtml = '';
        if (popupParcel.kiwi_userPreferences.researchMode === "on") {
          researchOnString = " checked='checked' ";
          researchOffString = "";
        } else {
          researchOnString = "";
          researchOffString = " checked='checked' ";
        }
        if (typeof autoOffAtUTCmilliTimestamp !== "undefined" && autoOffAtUTCmilliTimestamp !== null) {
          researchModeExpirationString = '<br>Research Mode will turn off (expire) at: ' + formatTime(autoOffAtUTCmilliTimestamp);
          researchModeExpirationString += '<br><button id="resetAutoOffTimer">Reset auto-off timer</button>';
        } else {
          researchModeExpirationString = '';
        }
        autoOffTimerType = popupParcel.kiwi_userPreferences.autoOffTimerType;
        autoOffTimerValue = popupParcel.kiwi_userPreferences.autoOffTimerValue;
        var auto20, auto60, autoAlways, autoCustom, autoCustomValue = '';
      if(autoOffTimerType != null){
        if(autoOffTimerType == "20"){ auto20 = " checked='checked' " }
        else if(autoOffTimerType == "60"){ auto60 = " checked='checked' " }
        else if(autoOffTimerType == "always"){ autoAlways = " checked='checked' " }
        else if(autoOffTimerType == "custom"){ autoCustom = " checked='checked' "; autoCustomValue = autoOffTimerValue;}
      };
        researchModeHtml += 'Research Mode: on <input type="radio" name="research" value="on" ' + researchOnString + '> - off <input type="radio" name="research" value="off" ' + researchOffString + '>' + researchModeExpirationString + '<br> <br>Auto-Off in: <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + auto20 + ' value="20"> 20 min <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + auto60 + ' value="60"> 1 hr <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + autoAlways + ' value="always"> Always On <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + autoCustom + ' value="custom"> Custom &nbsp; &nbsp; <input id="autoCustomValue" type="text" value="' + autoCustomValue + '" size="4" disabled /> minutes';
        $("#researchModeDrop").html(researchModeHtml);
        servicesHtml = '';
        _ref = popupParcel.kiwi_servicesInfo;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          service = _ref[index];
          console.debug(service);
          console.debug(service);
          if (service.active === "on") {
            activeCheck = " checked='checked' ";
            notActiveCheck = "";
          } else {
            activeCheck = "";
            notActiveCheck = " checked='checked' ";
          }
          servicesHtml += '<br> <div class="serviceListing"> <table><tbody><tr> <td class="upDownButtons">';
          if (index !== 0) {
            servicesHtml += '<span class="glyphicon glyphicon-chevron-up" id="' + service.name + '_moveServiceUp" aria-hidden="true"></span>';
          }
          if (index !== 0 && index !== popupParcel.kiwi_servicesInfo.length - 1) {
            servicesHtml += '<br><br>';
          }
          if (index !== popupParcel.kiwi_servicesInfo.length - 1) {
            servicesHtml += '<span class="glyphicon glyphicon-chevron-down" id="' + service.name + '_moveServiceDown" aria-hidden="true"></span>';
          }
          servicesHtml += '</td> <td class="serviceInfo">' + service.title + ' - using: <a href="' + service.broughtToYouByURL + '">' + service.broughtToYouByTitle + '</a><br> <div style="padding-left:15px;"> status: on <input type="radio" name="' + service.name + '_serviceStatus" value="on" ' + activeCheck + '> - off <input type="radio" name="' + service.name + '_serviceStatus" value="off" ' + notActiveCheck + '> <br>Results are deemed notable (capitilizes badge letter, optionally plays sound) if: <br> URL is an exact match, and: <br> it has been <input id="' + service.name + '_hoursNotable" type="text" size="4" value="' + service.notableConditions.hoursSincePosted + '"/> or fewer hours since posting - or <br> it has <input id="' + service.name + '_commentsNotable" type="text" size="4" value="' + service.notableConditions.num_comments + '"/> or more comments </div> </td> </tr></tbody></table> </div>';
          console.log('trying to set with ' + service.notableConditions.hoursSincePosted + '"/> or fewer hours since posting - or');
        }
        servicesHtml += '<div class="serviceListing"> add service! (tweet) </div>';
        $("#servicesInfoDrop").html(servicesHtml);
        return views[viewName].bind(popupParcel);
      },
      bind: function(popupParcel) {
        var allInputs, autoTimerRadios, bindDown, bindUp, downButton, index, postError, saveButtons, service, upButton, viewName, _i, _len, _ref;
        viewName = 'userPreferences';
        saveButtons = $(".userPreferencesSave");
        saveButtons.attr('disabled', 'disabled');
        views[viewName].elsToUnbind.push(saveButtons);
        autoTimerRadios = $("input:radio[name='researchAutoOffType']");
        allInputs = $('#userPreferencesSave input');
        views[viewName].elsToUnbind.push(allInputs);
        allInputs.bind('change', function() {
          return $(".userPreferencesSave").removeAttr('disabled');
        });
        $("#userPreferencesView input").bind('focus', function() {
          return $(".userPreferencesSave").removeAttr('disabled');
        });
        if ($("input:radio[name='researchAutoOffType']:checked").val() === 'custom') {
          $("#autoCustomValue").removeAttr('disabled');
        }
        autoTimerRadios.bind('change', function() {
          if ($("input:radio[name='researchAutoOffType']:checked").val() === 'custom') {
            return $("#autoCustomValue").removeAttr('disabled');
          } else {
            return $("#autoCustomValue").attr('disabled', 'disabled');
          }
        });
        bindDown = function(downButton, index) {
          return downButton.bind('click', function() {
            var parcel;
            popupParcel.kiwi_servicesInfo = moveArrayElement(popupParcel.kiwi_servicesInfo, index, index + 1);
            parcel = {
              refreshView: 'userPreferences',
              keyName: 'kiwi_servicesInfo',
              newValue: popupParcel.kiwi_servicesInfo,
              localOrSync: 'sync',
              msg: 'kiwiPP_post_save_a_la_carte'
            };
            return sendParcel(parcel);
          });
        };
        bindUp = function(upButton, index) {
          return upButton.bind('click', function() {
            var parcel;
            popupParcel.kiwi_servicesInfo = moveArrayElement(popupParcel.kiwi_servicesInfo, index, index - 1);
            parcel = {
              refreshView: 'userPreferences',
              keyName: 'kiwi_servicesInfo',
              newValue: popupParcel.kiwi_servicesInfo,
              localOrSync: 'sync',
              msg: 'kiwiPP_post_save_a_la_carte'
            };
            return sendParcel(parcel);
          });
        };
        _ref = popupParcel.kiwi_servicesInfo;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          service = _ref[index];
          downButton = $("#" + service.name + '_moveServiceDown');
          if (downButton.length > 0) {
            views[viewName].elsToUnbind.push(downButton);
            bindDown(downButton, index);
          }
          upButton = $("#" + service.name + '_moveServiceUp');
          if (upButton.length > 0) {
            views[viewName].elsToUnbind.push(upButton);
            bindUp(upButton, index);
          }
        }
        postError = function(userErrMsg) {
          return $("#" + viewName + "View .userErrMsg").html(userErrMsg);
        };
        return saveButtons.bind('click', function() {
          var active, allowedAutoOffTypes, autoOffTimerType, autoOffTimerValue, hoursSincePosted, num_comments, parcel, researchMode, _j, _k, _len1, _len2, _ref1, _ref2;
          researchMode = $("input:radio[name='research']:checked").val();
          if (researchMode !== 'on' && researchMode !== 'off') {
            postError('research mode must be "on" or "off"');
            return 0;
          }
          allowedAutoOffTypes = ["20", "60", "always", "custom"];
          autoOffTimerType = $("input:radio[name='researchAutoOffType']:checked").val();
          autoOffTimerValue = $("#autoCustomValue").val();
          if (__indexOf.call(allowedAutoOffTypes, autoOffTimerType) >= 0) {
            if (autoOffTimerType === 'custom' && (autoOffTimerValue === '' || isNaN(autoOffTimerValue))) {
              postError('Must specify a number of minutes for auto-off timer.');
              return 0;
            }
          } else {
            postError('not acceptable autoOffTimerType');
            return 0;
          }
          _ref1 = popupParcel.kiwi_servicesInfo;
          for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
            service = _ref1[index];
            active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
            if (active !== 'on' && active !== 'off') {
              postError('active must be "on" or "off"');
              return 0;
            }
            hoursSincePosted = $('#' + service.name + '_hoursNotable').val();
            if (hoursSincePosted === '' || isNaN(hoursSincePosted)) {
              postError('Hours must be an number');
              return 0;
            }
            num_comments = $('#' + service.name + '_commentsNotable').val();
            if (num_comments === '' || isNaN(num_comments)) {
              postError('Number of comments must be an integer');
              return 0;
            }
          }
          popupParcel.kiwi_userPreferences.researchMode = researchMode;
          if (autoOffTimerType !== 'custom') {
            popupParcel.kiwi_userPreferences.autoOffTimerType = autoOffTimerType;
          } else {
            popupParcel.kiwi_userPreferences.autoOffTimerType = autoOffTimerType;
            popupParcel.kiwi_userPreferences.autoOffTimerValue = parseFloat(autoOffTimerValue);
          }
          _ref2 = popupParcel.kiwi_servicesInfo;
          for (index = _k = 0, _len2 = _ref2.length; _k < _len2; index = ++_k) {
            service = _ref2[index];
            active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
            popupParcel.kiwi_servicesInfo[index].active = active;
            hoursSincePosted = $('#' + service.name + '_hoursNotable').val();
            popupParcel.kiwi_servicesInfo[index].notableConditions.hoursSincePosted = parseFloat(hoursSincePosted);
            num_comments = $('#' + service.name + '_commentsNotable').val();
            popupParcel.kiwi_servicesInfo[index].notableConditions.num_comments = parseInt(num_comments);
          }
          popupParcel.view = 'userPreferences';
          parcel = {
            refreshView: popupParcel.view,
            newPopupParcel: popupParcel,
            msg: 'kiwiPP_post_savePopupParcel'
          };
          return sendParcel(parcel);
        });
      }
    },
    alerts: {
      elsToUnbind: [],
      render: function(popupParcel) {
        var viewName;
        viewName = 'alerts';
        unbindView(popupParcel);
        return showViewAndBindGoToViewButtons(viewName, popupParcel);
      }
    },
    credits: {
      elsToUnbind: [],
      render: function(popupParcel) {
        'http://glyphicons.com/';
        unbindView(popupParcel);
        return showViewAndBindGoToViewButtons(viewName, popupParcel);
      }
    }
  };

  tailorResults_returnHtml = function(serviceInfoObject, serviceResults) {
    var fuzzyMatchBool, index, listing, preppedHTMLstring, _i, _j, _len, _len1, _ref, _ref1, _time;
    preppedHTMLstring = '';
    fuzzyMatchBool = false;
    preppedHTMLstring += "<br>" + serviceInfoObject.title + "<br>";
    serviceResults.service_PreppedResults = _.sortBy(serviceResults.service_PreppedResults, 'num_comments');
    serviceResults.service_PreppedResults.reverse();
    _ref = serviceResults.service_PreppedResults;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      listing = _ref[index];
      if (listing.kiwi_exact_match) {
        preppedHTMLstring += '<div class="listing" style="position:relative;">';
        preppedHTMLstring += '<a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.kiwi_permaId + '">';
        if ((listing.over_18 != null) && listing.over_18 === true) {
          preppedHTMLstring += '<span class="nsfw">NSFW</span>' + listing.title + '<br>';
        } else {
          preppedHTMLstring += listing.title + '<br>';
        }
        _time = formatTime(listing.kiwi_created_at);
        preppedHTMLstring += listing.num_comments + ' comments, ' + listing.kiwi_score + ' upvotes -- ' + _time + '</a>';
        if (listing.subreddit != null) {
          preppedHTMLstring += '<br><span>';
          preppedHTMLstring += '<a target="_blank" href="' + serviceInfoObject.permalinkBase + '/r/' + listing.subreddit + '">';
          preppedHTMLstring += 'subreddit: ' + listing.subreddit + '</a></span>';
        }
        preppedHTMLstring += '<div style="float:right;">';
        preppedHTMLstring += '<a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a>';
        preppedHTMLstring += '</div></div><br>';
      } else {
        fuzzyMatchBool = true;
      }
    }
    if (fuzzyMatchBool) {
      preppedHTMLstring += '<br><div class="showFuzzyMatches" style="position:relative;"> Show fuzzy matches </div><br><span class="fuzzyMatches">';
      _ref1 = serviceResults.service_PreppedResults;
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        listing = _ref1[index];
        if (!listing.kiwi_exact_match) {
          preppedHTMLstring += '<div class="listing">';
          preppedHTMLstring += '<a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.kiwi_permaId + '">';
          preppedHTMLstring += 'for Url: <span class="altURL">' + listing.url + '<br>';
          if ((listing.over_18 != null) && listing.over_18 === true) {
            preppedHTMLstring += '<span class="nsfw">NSFW</span>' + listing.title + '<br>';
          } else {
            preppedHTMLstring += listing.title + '<br>';
          }
          preppedHTMLstring += listing.num_comments + ' comments, ' + listing.kiwi_score + ' upvotes ' + formatTime(listing.kiwi_created_at) + '</a>';
          if (listing.subreddit != null) {
            preppedHTMLstring += '<br><span>';
            preppedHTMLstring += '<a target="_blank" href="' + serviceInfoObject.permalinkBase + '/r/' + listing.subreddit + '">';
            preppedHTMLstring += 'subreddit: ' + listing.subreddit + '</a></span>';
          }
          preppedHTMLstring += '<div style="float:right;">';
          preppedHTMLstring += '<a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a></div>';
          preppedHTMLstring += '</div><br>';
        }
      }
      preppedHTMLstring += "</span>";
    }
    return preppedHTMLstring;
  };

  unbindView = function(viewName) {
    var el, _i, _len, _ref;
    _ref = views[viewName].elsToUnbind;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      el.unbind();
    }
    return views[viewName].elsToUnbind = [];
  };

  bindGoToViewButtons = function(buttonEls, viewName, viewData) {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = buttonEls.length; _i < _len; _i++) {
      el = buttonEls[_i];
      _results.push($(el).bind('click', function(ev) {
        console.log('clicked ' + viewName);
        return views[viewName].render(viewData);
      }));
    }
    return _results;
  };

  showViewAndBindGoToViewButtons = function(viewName, viewData) {
    var els_goTo_view, viewValue, _results, _viewName;
    _results = [];
    for (_viewName in views) {
      viewValue = views[_viewName];
      if (_viewName === viewName) {
        console.log('showing ' + viewName);
        _results.push($('#' + viewName + 'View').css({
          'display': 'block'
        }));
      } else {
        console.log('hiding ' + _viewName);
        $('#' + _viewName + 'View').css({
          'display': 'none'
        });
        els_goTo_view = $('#' + viewName + 'View .goTo_' + _viewName + 'View');
        views[viewName].elsToUnbind.push(els_goTo_view);
        _results.push(bindGoToViewButtons(els_goTo_view, _viewName, viewData));
      }
    }
    return _results;
  };

  receiveParcel = function(parcel) {
    if (parcel.msg == null) {
      return false;
    }
    switch (parcel.msg) {
      case 'kiwiPP_popupParcel_ready':
        return chrome.tabs.query({
          currentWindow: true,
          active: true
        }, function(tabs) {
          var tabUrl;
          if (tabs.length > 0 && tabs[0].status === "complete") {
            if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
              tabUrl = tabs[0].url;
              if (tabs[0].url === parcel.forUrl) {
                console.log("when 'popupParcel_ready' parcel");
                console.debug(parcel);
                return initialize(parcel.popupParcel);
              }
            } else {
              console.log('chrome-devtools:// ');
              return 0;
            }
          }
        });
    }
  };

  port = chrome.extension.connect({
    name: "kiwi_fromBackgroundToPopup"
  });

  sendParcel = function(parcel) {
    console.log('wtf sent');
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      if (tabs.length > 0 && tabs[0].status === "complete") {
        if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
          parcel.forUrl = tabs[0].url;
          if (parcel.msg == null) {
            return false;
          }
          switch (parcel.msg) {
            case 'kiwiPP_request_popupParcel':
              return port.postMessage(parcel);
            case 'kiwiPP_post_savePopupParcel':
              return port.postMessage(parcel);
            case 'kiwiPP_post_save_a_la_carte':
              return port.postMessage(parcel);
          }
        } else {
          console.log('chrome-devtools:// ');
          return 0;
        }
      }
    });
  };

  chrome.extension.onConnect.addListener(function(port) {
    if (port.name === 'kiwi_fromBackgroundToPopup') {
      return port.onMessage.addListener(function(pkg) {
        return receiveParcel(pkg);
      });
    }
  });

  moveArrayElement = function(array, from, to) {
    array.splice(to, 0, array.splice(from, 1)[0]);
    return array;
  };

  getRandom = function(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  formatTime = function(utcMillisecondTimestamp) {
    var a, date, hour, min, month, months, sec, time, year;
    a = new Date(utcMillisecondTimestamp);
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    year = a.getFullYear();
    month = months[a.getMonth()];
    date = a.getDate();
    hour = a.getHours();
    min = a.getMinutes();
    sec = a.getSeconds();
    time = month + ' ' + date + ', ' + year + ' ' + hour + ':' + min + ':' + sec;
    return time;
  };

  renderExtensionHeight = function(elementId, extraPx) {
    var extHeight_;
    if (viewElementId === elementId) {
      extraPx = 2;
      extHeight_ = $('#' + elementId).outerHeight() + extraPx;
      if (extHeight_ > 590) {
        extHeight_ = 590;
      }
      $('body').css('height', extHeight_ + 'px');
      heightString = extHeight_.toString() +'px';
      $('html').css('min-height', heightString);
      extHeight_--;
      return $('body').css('min-height', heightString);
    }
  };

  capitalizeFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  htmlEntities = function(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };

  console.log('trying to send123');

  sendParcel({
    'msg': 'kiwiPP_request_popupParcel'
  });

}).call(this);

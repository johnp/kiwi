// Generated by CoffeeScript 1.9.0
(function() {
  var Conversations, Credits, CustomSearch, UserPreferences, View, Views, Widget, Widgets, bindGoToViewButtons, capitalizeFirstLetter, formatTime, getRandom, getURLParam, htmlEntities, initialize, moveArrayElement, preferencesOnlyPage, receiveParcel, renderExtensionHeight, renderedBool, sendParcel, tailorRedditAndHNresults_returnHtml, tailorResults, viewElementId,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  viewElementId = '';

  renderedBool = false;

  preferencesOnlyPage = false;

  initialize = function(popupParcel) {
    console.log('in init');
    if (getURLParam(window.location, 'optionsOnly') !== '') {
      preferencesOnlyPage = true;
      Views.userPreferences.render(popupParcel);
      return 0;
    }
    if ((popupParcel.view != null) && (Views[popupParcel.view] != null)) {
      return Views[popupParcel.view].render(popupParcel);
    } else {
      return Views.conversations.render(popupParcel);
    }
  };

  Widget = (function() {
    function Widget(_at_name, _at___renderStates__) {
      this.name = _at_name;
      this.__renderStates__ = _at___renderStates__;
      this.elsToUnbind = [];
      this.DOMselector = "#" + this.name + "_Widget";
      this.bindAllGoToViewButtons = (function(_this) {
        return function(viewData) {
          var els_goTo_view, viewValue, _results, _viewName;
          console.log('@bindAllGoToViewButtons = (viewData) =>');
          console.log(_this.DOMname);
          _results = [];
          for (_viewName in Views) {
            viewValue = Views[_viewName];
            console.log(_viewName);
            els_goTo_view = $(_this.DOMselector + ' .goTo_' + _viewName + 'View');
            console.debug(els_goTo_view);
            _this.elsToUnbind.push(els_goTo_view);
            _results.push(bindGoToViewButtons(els_goTo_view, _viewName, viewData));
          }
          return _results;
        };
      })(this);
      this.unbindWidget = (function(_this) {
        return function() {
          var el, _i, _len, _ref;
          _ref = _this.elsToUnbind;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            el.unbind();
          }
          return _this.elsToUnbind = [];
        };
      })(this);
      this.render = (function(_this) {
        return function(renderState, popupParcel) {
          _this.unbindWidget(_this.name);
          _this.renderStates[renderState].paint(popupParcel);
          _this.bindAllGoToViewButtons(popupParcel);
          return _this.renderStates[renderState].bind(popupParcel);
        };
      })(this);
      this.renderStates = this.__renderStates__();
      return this;
    }

    return Widget;

  })();

  CustomSearch = (function(_super) {
    __extends(CustomSearch, _super);

    function CustomSearch(_at_name, _at_widgetOpenBool) {
      this.name = _at_name;
      this.widgetOpenBool = _at_widgetOpenBool;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      CustomSearch.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    CustomSearch.prototype.init = function(popupParcel) {
      this.unbindWidget();
      if (this.widgetOpenBool === false) {
        return this.render('collapsed', popupParcel);
      } else {
        return this.render('opened', popupParcel);
      }
    };

    CustomSearch.prototype.__renderStates__ = function() {
      return {
        collapsed: {
          paint: (function(_this) {
            return function(popupParcel) {
              var openedCustomSearchHTML;
              openedCustomSearchHTML = '<div> <input style="width:275px; margin-right:10px;" id="customSearchQueryInput" type="text" placeholder=" combined search" /> <button class="goTo_userPreferencesView">User Options <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></button> </div><br>';
              if ((popupParcel.kiwi_customSearchResults.queryString != null) && popupParcel.kiwi_customSearchResults.queryString !== '') {
                openedCustomSearchHTML += "<a id='openPreviousSearch'>check previous for '" + popupParcel.kiwi_customSearchResults.queryString + "' </a> <a id='clearPreviousSearch'>clear</a><br>";
              }
              return $(_this.DOMselector).html(openedCustomSearchHTML);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var clearPreviousSearch, inputSearchQueryInput, previousSearchLink;
              console.log('bind: (popupParcel) =>');
              inputSearchQueryInput = $("#customSearchQueryInput");
              previousSearchLink = $("#openPreviousSearch");
              clearPreviousSearch = $("#clearPreviousSearch");
              _this.elsToUnbind.concat([inputSearchQueryInput, previousSearchLink, clearPreviousSearch]);
              if ((previousSearchLink != null) && previousSearchLink.length > 0) {
                previousSearchLink.bind('click', function() {
                  return $("#customSearchQueryInput").click();
                });
              }
              if ((clearPreviousSearch != null) && clearPreviousSearch.length > 0) {
                clearPreviousSearch.bind('click', function() {
                  var parcel;
                  parcel = {
                    msg: 'kiwiPP_refreshSearchQuery'
                  };
                  return sendParcel(parcel);
                });
              }
              return inputSearchQueryInput.bind('click', function() {
                console.log('@widgetOpenBool = true');
                _this.widgetOpenBool = true;
                return _this.render('opened', popupParcel);
              });
            };
          })(this)
        },
        opened: {
          paint: (function(_this) {
            return function(popupParcel) {
              var cellWidth, openedCustomSearchHTML, queryString, serviceDisabledAttr, serviceInfoObject, service_PreppedResults, tagActiveChecked, tagDisabledAttr, tagName, tagObject, _i, _j, _len, _len1, _ref, _ref1, _ref2;
              console.log('popupParcel.kiwi_servicesInfo.length');
              console.log(popupParcel.kiwi_servicesInfo.length);
              cellWidth = 85 / popupParcel.kiwi_servicesInfo.length;
              queryString = popupParcel.kiwi_customSearchResults.queryString != null ? popupParcel.kiwi_customSearchResults.queryString : '';
              openedCustomSearchHTML = '<div> <input id="customSearchQueryInput" value="' + queryString + '" type="text" placeholder=" combined search" style="width:234px; margin-right: 10px;" /> <button id="customSearchQuerySubmit" style="margin-right: 10px;">Submit</button> <button style="" class="goTo_userPreferencesView"> Options <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></button> <br><br> <table style="width:100%;"><tbody><tr style="vertical-align:top;">';
              _ref = popupParcel.kiwi_servicesInfo;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                serviceInfoObject = _ref[_i];
                if (serviceInfoObject.active === 'off') {
                  serviceDisabledAttr = ' disabled title="Service must be active, can be changed in options." ';
                } else {
                  serviceDisabledAttr = ' checked ';
                }
                openedCustomSearchHTML += '<td class="servicesToSearch" style="width:' + cellWidth + '%; position:relative; text-align:center;"> <label class="customSearchServicePref" >&nbsp;&nbsp;' + serviceInfoObject.title + '&nbsp; <input type="checkbox"' + serviceDisabledAttr + ' value="' + serviceInfoObject.name + '" /> </label><br>';
                _ref1 = serviceInfoObject.customSearchTags;
                for (tagName in _ref1) {
                  tagObject = _ref1[tagName];
                  if ((popupParcel.kiwi_customSearchResults.servicesSearchesRequested != null) && (popupParcel.kiwi_customSearchResults.servicesSearchesRequested[serviceInfoObject.name] != null)) {
                    if (popupParcel.kiwi_customSearchResults.servicesSearchesRequested[serviceInfoObject.name].customSearchTags[tagName] != null) {
                      tagActiveChecked = ' checked ';
                    } else {
                      tagActiveChecked = '';
                    }
                  } else {
                    tagActiveChecked = tagObject.include === true ? ' checked ' : '';
                  }
                  tagDisabledAttr = serviceInfoObject.active === 'off' ? ' disabled title="Service must be active, can be changed in options." ' : '';
                  openedCustomSearchHTML += '<label style="font-weight: normal; font-size: .9em;">' + tagObject.title + ': &nbsp; <input class="tagPref tagPref_' + serviceInfoObject.name + '" type="checkbox"' + tagActiveChecked + tagDisabledAttr + ' value="' + tagName + '" /> </label>';
                }
                openedCustomSearchHTML += '</td>';
              }
              openedCustomSearchHTML += '<td style="width:15%;" id="close__' + _this.name + '"> &nbsp; close <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> </td> </tr></tbody></table></div><br>';
              if ((popupParcel.kiwi_customSearchResults != null) && (popupParcel.kiwi_customSearchResults.queryString != null) && popupParcel.kiwi_customSearchResults.queryString !== '') {
                openedCustomSearchHTML += '<div id="customSearchResultsDrop"> Search for: ' + popupParcel.kiwi_customSearchResults.queryString;
                _ref2 = popupParcel.kiwi_servicesInfo;
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  serviceInfoObject = _ref2[_j];
                  if (popupParcel.kiwi_customSearchResults.servicesSearched[serviceInfoObject.name] != null) {
                    service_PreppedResults = popupParcel.kiwi_customSearchResults.servicesSearched[serviceInfoObject.name].results;
                    openedCustomSearchHTML += tailorResults[serviceInfoObject.name](serviceInfoObject, service_PreppedResults);
                  } else {
                    openedCustomSearchHTML += '<br>No results for ' + serviceInfoObject.name + '<br>';
                  }
                }
                openedCustomSearchHTML += '</div>';
              } else {
                openedCustomSearchHTML += '<div id="customSearchResultsDrop">No results to show... make a search! :) </div><br>';
              }
              return $(_this.DOMselector).html(openedCustomSearchHTML);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var closeWidget, customSearchQueryInput, customSearchQuerySubmit, elsServicesActivePrefs, sendSearch;
              customSearchQueryInput = $("#customSearchQueryInput");
              customSearchQuerySubmit = $("#customSearchQuerySubmit");
              closeWidget = $('#close__' + _this.name);
              elsServicesActivePrefs = $(".servicesToSearch .customSearchServicePref input");
              _this.elsToUnbind.concat([customSearchQueryInput, closeWidget, customSearchQuerySubmit, elsServicesActivePrefs]);
              elsServicesActivePrefs.bind('change', function(ev) {
                var serviceName;
                serviceName = ev.target.value;
                console.log('ev.target.checked ' + (ev.target.checked === false));
                if (ev.target.checked === false) {
                  console.log('if ev.target.checked == "false" ' + serviceName);
                  return $("input.tagPref_" + serviceName).attr('disabled', 'disabled');
                } else {
                  return $("input.tagPref_" + serviceName).removeAttr('disabled');
                }
              });
              sendSearch = function() {
                var el, elTagPref, elTagPrefs, elsServicesToSearch, parcel, queryString, serviceName, servicesToSearch, tagName, _i, _j, _len, _len1;
                queryString = customSearchQueryInput.val();
                elsServicesToSearch = $(".servicesToSearch .customSearchServicePref input:checked");
                servicesToSearch = {};
                for (_i = 0, _len = elsServicesToSearch.length; _i < _len; _i++) {
                  el = elsServicesToSearch[_i];
                  serviceName = $(el).val();
                  servicesToSearch[serviceName] = {};
                  servicesToSearch[serviceName].customSearchTags = {};
                  elTagPrefs = $("input.tagPref_" + serviceName + ":checked");
                  for (_j = 0, _len1 = elTagPrefs.length; _j < _len1; _j++) {
                    elTagPref = elTagPrefs[_j];
                    tagName = $(elTagPref).val();
                    servicesToSearch[serviceName].customSearchTags[tagName] = {};
                  }
                }
                console.log('asfdasdfasdf ' + serviceName);
                console.debug(servicesToSearch);
                if (queryString !== '') {
                  parcel = {
                    msg: 'kiwiPP_post_customSearch',
                    customSearchRequest: {
                      queryString: queryString,
                      servicesToSearch: servicesToSearch
                    }
                  };
                  return sendParcel(parcel);
                }
              };
              customSearchQueryInput.keypress(function(event) {
                if (event.charCode === 13) {
                  return sendSearch();
                }
              });
              customSearchQuerySubmit.bind('click', function() {
                return sendSearch();
              });
              closeWidget.bind('click', function() {
                _this.widgetOpenBool = false;
                return _this.render('collapsed', popupParcel);
              });
              return customSearchQueryInput.focus();
            };
          })(this)
        },
        renderStates: {}
      };
    };

    return CustomSearch;

  })(Widget);

  Widgets = {
    customSearch: new CustomSearch('customSearch', false)
  };

  View = (function() {
    function View(_at_name, _at___renderStates__) {
      this.name = _at_name;
      this.__renderStates__ = _at___renderStates__;
      this.elsToUnbind = [];
      this.DOMselector = "#" + this.name + "_View";
      this.showView = (function(_this) {
        return function() {
          var viewValue, _results, _viewName;
          _results = [];
          for (_viewName in Views) {
            viewValue = Views[_viewName];
            if (_viewName === _this.name) {
              console.log('showing ' + _viewName);
              _results.push($('#' + _viewName + '_View').css({
                'display': 'block'
              }));
            } else {
              console.log('hiding ' + _viewName);
              _results.push($('#' + _viewName + '_View').css({
                'display': 'none'
              }));
            }
          }
          return _results;
        };
      })(this);
      this.bindAllGoToViewButtons = (function(_this) {
        return function(viewData) {
          var els_goTo_view, viewValue, _results, _viewName;
          console.log('@bindAllGoToViewButtons = (viewData) =>');
          console.log(_this.DOMname);
          _results = [];
          for (_viewName in Views) {
            viewValue = Views[_viewName];
            els_goTo_view = $(_this.DOMselector + ' .goTo_' + _viewName + 'View');
            _this.elsToUnbind.push(els_goTo_view);
            _results.push(bindGoToViewButtons(els_goTo_view, _viewName, viewData));
          }
          return _results;
        };
      })(this);
      this.unbindView = (function(_this) {
        return function() {
          var el, _i, _len, _ref;
          _ref = _this.elsToUnbind;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            el.unbind();
          }
          return _this.elsToUnbind = [];
        };
      })(this);
      this.render = (function(_this) {
        return function(popupParcel, renderState) {
          if (renderState == null) {
            renderState = "__normal__";
          }
          _this.unbindView(_this.name);
          _this.renderStates[renderState].paint(popupParcel);
          _this.showView();
          _this.bindAllGoToViewButtons(popupParcel);
          return _this.renderStates[renderState].bind(popupParcel);
        };
      })(this);
      this.renderStates = this.__renderStates__();
      return this;
    }

    return View;

  })();

  Conversations = (function(_super) {
    __extends(Conversations, _super);

    function Conversations(_at_name) {
      this.name = _at_name;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      Conversations.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    Conversations.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render(popupParcel);
    };

    Conversations.prototype.__renderStates__ = function() {
      return {
        __normal__: {
          paint: (function(_this) {
            return function(popupParcel) {
              var preppedHTMLstring, researchModeDisabledButtonsHTML, serviceInfoObject, service_PreppedResults, submitTitle, submitUrl, _i, _len, _ref;
              console.log(' in conversations view');
              console.debug(popupParcel);
              Widgets['customSearch'].init(popupParcel);
              researchModeDisabledButtonsHTML = '';
              if (popupParcel.urlBlocked === true || popupParcel.kiwi_userPreferences.researchModeOnOff === 'off' || ((popupParcel.oldUrl != null) && popupParcel.oldUrl === true)) {
                researchModeDisabledButtonsHTML += "<br><button id='researchUrlOverride'>Research this Url</button><br>";
              }
              if (popupParcel.kiwi_userPreferences.researchModeOnOff === 'off') {
                researchModeDisabledButtonsHTML += "<br>Research Mode is off <button class='goTo_userPreferencesView'> change settings </button><br>";
              }
              $("#researchModeDisabledButtons").html(researchModeDisabledButtonsHTML);
              preppedHTMLstring = '';
              _ref = popupParcel.kiwi_servicesInfo;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                serviceInfoObject = _ref[_i];
                if ((popupParcel.allPreppedResults[serviceInfoObject.name] != null) && popupParcel.allPreppedResults[serviceInfoObject.name].service_PreppedResults.length > 0) {
                  service_PreppedResults = popupParcel.allPreppedResults[serviceInfoObject.name].service_PreppedResults;
                  preppedHTMLstring += tailorResults[serviceInfoObject.name](serviceInfoObject, service_PreppedResults);
                } else {
                  if (serviceInfoObject.submitTitle != null) {
                    submitUrl = serviceInfoObject.submitUrl;
                    submitTitle = serviceInfoObject.submitTitle;
                    preppedHTMLstring += '<div><a target="_blank" href="' + submitUrl + '">' + submitTitle + '</a></div>';
                  } else {
                    preppedHTMLstring += '<div>No results for ' + serviceInfoObject.title + '</div>';
                  }
                }
              }
              $("#resultsByService").html(preppedHTMLstring);
              setTimeout(function() {
                renderExtensionHeight(this.DOMselector, 1);
                $($('input')[0]).blur();
                $($('a')[0]).blur();
                return $($('button')[0]).blur();
              }, 300);
              renderExtensionHeight(_this.DOMselector, 1);
              $($('input')[0]).blur();
              $($('a')[0]).blur();
              return $($('button')[0]).blur();
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var clearKiwiURLCacheButton, refreshURLresultsButton, researchUrlOverrideButton;
              researchUrlOverrideButton = $("#researchUrlOverride");
              clearKiwiURLCacheButton = $("#clearKiwiURLCache");
              refreshURLresultsButton = $("#refreshURLresults");
              _this.elsToUnbind.concat([refreshURLresultsButton, researchUrlOverrideButton, clearKiwiURLCacheButton]);
              if ((refreshURLresultsButton != null) && refreshURLresultsButton.length > 0) {
                refreshURLresultsButton.bind('click', function() {
                  var parcel;
                  parcel = {
                    msg: 'kiwiPP_refreshURLresults'
                  };
                  return sendParcel(parcel);
                });
              }
              if ((clearKiwiURLCacheButton != null) && clearKiwiURLCacheButton.length > 0) {
                clearKiwiURLCacheButton.bind('click', function() {
                  var parcel;
                  parcel = {
                    msg: 'kiwiPP_clearAllURLresults'
                  };
                  return sendParcel(parcel);
                });
              }
              if ((researchUrlOverrideButton != null) && researchUrlOverrideButton.length > 0) {
                return researchUrlOverrideButton.bind('click', function() {
                  var parcel;
                  parcel = {
                    msg: 'kiwiPP_researchUrlOverrideButton'
                  };
                  return sendParcel(parcel);
                });
              }
            };
          })(this)
        }
      };
    };

    return Conversations;

  })(View);

  UserPreferences = (function(_super) {
    __extends(UserPreferences, _super);

    function UserPreferences(_at_name) {
      this.name = _at_name;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      UserPreferences.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    UserPreferences.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render(popupParcel);
    };

    UserPreferences.prototype.__renderStates__ = function() {
      return {
        __normal__: {
          paint: (function(_this) {
            return function(popupParcel) {
              var activeCheck, autoOffTimerType, autoOffTimerValue, currentTime, index, notActiveCheck, researchModeExpirationString, researchModeHtml, researchOffString, researchOnString, service, servicesHtml, _i, _len, _ref;
              console.log('paint: adsfaeaewfawefawefawef(popupParcel) =># viewName = ');
              if (preferencesOnlyPage === true) {
                $("#menuBar_preferences").hide();
              }
              currentTime = Date.now();
              if ((popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp != null) && popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp > currentTime) {
                $("#autoOffTimer").html("Auto-Off timer expires at: " + formatTime(popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp) + "<br>");
              } else if (popupParcel.kiwi_userPreferences.researchModeOnOff === 'off' && (popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp != null)) {
                $("#autoOffTimer").html("Auto-off timer last expired at: " + formatTime(popupParcel.kiwi_userPreferences.autoOffAtUTCmilliTimestamp) + "<br>");
              } else {
                $("#autoOffTimer").html("Auto-off timer is not set");
              }
              researchModeHtml = '';
              if (popupParcel.kiwi_userPreferences.researchModeOnOff === "on") {
                researchOnString = " checked='checked' ";
                researchOffString = "";
              } else {
                researchOnString = "";
                researchOffString = " checked='checked' ";
              }
              if (typeof autoOffAtUTCmilliTimestamp !== "undefined" && autoOffAtUTCmilliTimestamp !== null) {
                researchModeExpirationString = '<br>Research Mode will turn off (expire) at: ' + formatTime(autoOffAtUTCmilliTimestamp);
                researchModeExpirationString += '<br><button id="resetAutoOffTimer">Reset auto-off timer</button>';
              } else {
                researchModeExpirationString = '';
              }
              autoOffTimerType = popupParcel.kiwi_userPreferences.autoOffTimerType;
              autoOffTimerValue = popupParcel.kiwi_userPreferences.autoOffTimerValue;
              var auto20, auto60, autoAlways, autoCustom, autoCustomValue = '';
        if(autoOffTimerType != null){
          if(autoOffTimerType == "20"){ auto20 = " checked='checked' " }
          else if(autoOffTimerType == "60"){ auto60 = " checked='checked' " }
          else if(autoOffTimerType == "always"){ autoAlways = " checked='checked' " }
          else if(autoOffTimerType == "custom"){ autoCustom = " checked='checked' "; autoCustomValue = autoOffTimerValue;}
        };
              researchModeHtml += 'Research Mode: on <input type="radio" name="research" value="on" ' + researchOnString + '> - off <input type="radio" name="research" value="off" ' + researchOffString + '>' + researchModeExpirationString + '<br> <br>Auto-Off in: <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + auto20 + ' value="20"> 20 min <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + auto60 + ' value="60"> 1 hr <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + autoAlways + ' value="always"> Always On <br>&nbsp; &nbsp;<input type="radio" name="researchAutoOffType" ' + autoCustom + ' value="custom"> Custom &nbsp; &nbsp; <input id="autoCustomValue" type="text" value="' + autoCustomValue + '" size="4" disabled /> minutes';
              $("#researchModeDrop").html(researchModeHtml);
              servicesHtml = '';
              _ref = popupParcel.kiwi_servicesInfo;
              for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                service = _ref[index];
                if (service.active === "on") {
                  activeCheck = " checked='checked' ";
                  notActiveCheck = "";
                } else {
                  activeCheck = "";
                  notActiveCheck = " checked='checked' ";
                }
                servicesHtml += '<br> <div class="serviceListing"> <table><tbody><tr> <td class="upDownButtons">';
                if (index !== 0) {
                  servicesHtml += '<span class="glyphicon glyphicon-chevron-up" id="' + service.name + '_moveServiceUp" aria-hidden="true"></span>';
                }
                if (index !== 0 && index !== popupParcel.kiwi_servicesInfo.length - 1) {
                  servicesHtml += '<br><br>';
                }
                if (index !== popupParcel.kiwi_servicesInfo.length - 1) {
                  servicesHtml += '<span class="glyphicon glyphicon-chevron-down" id="' + service.name + '_moveServiceDown" aria-hidden="true"></span>';
                }
                servicesHtml += '</td> <td class="serviceInfo">' + service.title + ' - using: <a href="' + service.broughtToYouByURL + '">' + service.broughtToYouByTitle + '</a><br> <div style="padding-left:15px;"> status: on <input type="radio" name="' + service.name + '_serviceStatus" value="on" ' + activeCheck + '> - off <input type="radio" name="' + service.name + '_serviceStatus" value="off" ' + notActiveCheck + '> <br>Results are deemed notable (capitilizes badge letter) if:';
                if (service.name === 'gnews') {
                  console.log(" if service.name == 'gnews'  servicesHtml ");
                  console.debug(service);
                  servicesHtml += '<br> it has <input id="' + service.name + '_numberOfStoriesFoundWithinTheHoursSincePostedLimit" type="text" size="4" value="' + service.notableConditions.numberOfStoriesFoundWithinTheHoursSincePostedLimit + '"/> or related stories <br> posted within  <input id="' + service.name + '_numberOfRelatedItemsWithClusterURL" type="text" size="4" value="' + service.notableConditions.numberOfRelatedItemsWithClusterURL + '"/> hours </div> </td> </tr></tbody></table> </div>';
                  console.log('trying to set with ' + service.notableConditions.hoursSincePosted + '"/> or fewer hours since posting - or');
                } else {
                  servicesHtml += '<br> URL is an exact match, and: <br> it has been <input id="' + service.name + '_hoursNotable" type="text" size="4" value="' + service.notableConditions.hoursSincePosted + '"/> or fewer hours since posting <br> - or - <br> it has <input id="' + service.name + '_commentsNotable" type="text" size="4" value="' + service.notableConditions.num_comments + '"/> or more comments </div> </td> </tr></tbody></table> </div>';
                  console.log('trying to set with ' + service.notableConditions.hoursSincePosted + '"/> or fewer hours since posting - or');
                }
              }
              servicesHtml += '<div class="serviceListing"> add service! (tweet) </div>';
              return $("#servicesInfoDrop").html(servicesHtml);
            };
          })(this),
          bind: (function(_this) {
            return function(popupParcel) {
              var allInputs, autoTimerRadios, downButton, index, postError, saveButtons, service, upButton, _bindDown, _bindUp, _i, _len, _ref;
              saveButtons = $(".userPreferencesSave");
              saveButtons.attr('disabled', 'disabled');
              autoTimerRadios = $("input:radio[name='researchAutoOffType']");
              allInputs = $(_this.DOMselector + ' input');
              _this.elsToUnbind.concat([allInputs, saveButtons, autoTimerRadios]);
              allInputs.bind('change', function() {
                return $(".userPreferencesSave").removeAttr('disabled');
              });
              allInputs.bind('focus', function() {
                return $(".userPreferencesSave").removeAttr('disabled');
              });
              if ($("input:radio[name='researchAutoOffType']:checked").val() === 'custom') {
                $("#autoCustomValue").removeAttr('disabled');
              }
              autoTimerRadios.bind('change', function() {
                if ($("input:radio[name='researchAutoOffType']:checked").val() === 'custom') {
                  return $("#autoCustomValue").removeAttr('disabled');
                } else {
                  return $("#autoCustomValue").attr('disabled', 'disabled');
                }
              });
              _bindDown = function(downButton, index) {
                return downButton.bind('click', function() {
                  var parcel;
                  popupParcel.kiwi_servicesInfo = moveArrayElement(popupParcel.kiwi_servicesInfo, index, index + 1);
                  parcel = {
                    refreshView: 'userPreferences',
                    keyName: 'kiwi_servicesInfo',
                    newValue: popupParcel.kiwi_servicesInfo,
                    localOrSync: 'sync',
                    msg: 'kiwiPP_post_save_a_la_carte'
                  };
                  return sendParcel(parcel);
                });
              };
              _bindUp = function(upButton, index) {
                return upButton.bind('click', function() {
                  var parcel;
                  popupParcel.kiwi_servicesInfo = moveArrayElement(popupParcel.kiwi_servicesInfo, index, index - 1);
                  parcel = {
                    refreshView: 'userPreferences',
                    keyName: 'kiwi_servicesInfo',
                    newValue: popupParcel.kiwi_servicesInfo,
                    localOrSync: 'sync',
                    msg: 'kiwiPP_post_save_a_la_carte'
                  };
                  return sendParcel(parcel);
                });
              };
              _ref = popupParcel.kiwi_servicesInfo;
              for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                service = _ref[index];
                downButton = $("#" + service.name + '_moveServiceDown');
                if (downButton.length > 0) {
                  _this.elsToUnbind.push(downButton);
                  _bindDown(downButton, index);
                }
                upButton = $("#" + service.name + '_moveServiceUp');
                if (upButton.length > 0) {
                  _this.elsToUnbind.push(upButton);
                  _bindUp(upButton, index);
                }
              }
              postError = function(userErrMsg) {
                return $(this.DOMselector + " .userErrMsg").html(userErrMsg);
              };
              return saveButtons.bind('click', function() {
                var active, allowedAutoOffTypes, autoOffTimerType, autoOffTimerValue, hoursSincePosted, notableSound, num_comments, numberOfRelatedItemsWithClusterURL, numberOfStoriesFoundWithinTheHoursSincePostedLimit, parcel, researchModeHTMLval, _j, _k, _len1, _len2, _ref1, _ref2;
                researchModeHTMLval = $("input:radio[name='research']:checked").val();
                console.log('researchModeHTMLval is ' + researchModeHTMLval);
                if (researchModeHTMLval !== 'on' && researchModeHTMLval !== 'off') {
                  postError('research mode must be "on" or "off"');
                  return 0;
                }
                allowedAutoOffTypes = ["20", "60", "always", "custom"];
                autoOffTimerType = $("input:radio[name='researchAutoOffType']:checked").val();
                autoOffTimerValue = $("#autoCustomValue").val();
                if (__indexOf.call(allowedAutoOffTypes, autoOffTimerType) >= 0) {
                  if (autoOffTimerType === 'custom' && (autoOffTimerValue === '' || isNaN(autoOffTimerValue))) {
                    postError('Must specify a number of minutes for auto-off timer.');
                    return 0;
                  }
                } else {
                  postError('not acceptable autoOffTimerType');
                  return 0;
                }
                _ref1 = popupParcel.kiwi_servicesInfo;
                for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
                  service = _ref1[index];
                  if (service.name === 'gnews') {
                    active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
                    if (active !== 'on' && active !== 'off') {
                      postError('active must be "on" or "off"');
                      return 0;
                    }
                    numberOfStoriesFoundWithinTheHoursSincePostedLimit = $('#' + service.name + '_numberOfStoriesFoundWithinTheHoursSincePostedLimit').val();
                    if (numberOfStoriesFoundWithinTheHoursSincePostedLimit === '' || isNaN(numberOfStoriesFoundWithinTheHoursSincePostedLimit)) {
                      postError('number Of Stories Found Within The Hours Since Posted Limit must be an integer');
                      return 0;
                    }
                    numberOfRelatedItemsWithClusterURL = $('#' + service.name + '_numberOfRelatedItemsWithClusterURL').val();
                    if (numberOfRelatedItemsWithClusterURL === '' || isNaN(numberOfRelatedItemsWithClusterURL)) {
                      postError('number Of Related Items With Cluster URL of comments must be an integer');
                      return 0;
                    }
                  } else {
                    active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
                    if (active !== 'on' && active !== 'off') {
                      postError('active must be "on" or "off"');
                      return 0;
                    }
                    hoursSincePosted = $('#' + service.name + '_hoursNotable').val();
                    if (hoursSincePosted === '' || isNaN(hoursSincePosted)) {
                      postError('Hours must be an number');
                      return 0;
                    }
                    num_comments = $('#' + service.name + '_commentsNotable').val();
                    if (num_comments === '' || isNaN(num_comments)) {
                      postError('Number of comments must be an integer');
                      return 0;
                    }
                  }
                }
                console.log('1234');
                popupParcel.kiwi_userPreferences.researchModeOnOff = researchModeHTMLval;
                if (autoOffTimerType !== 'custom') {
                  popupParcel.kiwi_userPreferences.autoOffTimerType = autoOffTimerType;
                } else {
                  popupParcel.kiwi_userPreferences.autoOffTimerType = autoOffTimerType;
                  popupParcel.kiwi_userPreferences.autoOffTimerValue = parseFloat(autoOffTimerValue);
                }
                _ref2 = popupParcel.kiwi_servicesInfo;
                for (index = _k = 0, _len2 = _ref2.length; _k < _len2; index = ++_k) {
                  service = _ref2[index];
                  active = $("input:radio[name='" + service.name + "_serviceStatus']:checked").val();
                  popupParcel.kiwi_servicesInfo[index].active = active;
                  notableSound = $("input:radio[name='" + service.name + "_soundStatus']:checked").val();
                  popupParcel.kiwi_servicesInfo[index].notableSound = notableSound;
                  hoursSincePosted = $('#' + service.name + '_hoursNotable').val();
                  popupParcel.kiwi_servicesInfo[index].notableConditions.hoursSincePosted = parseFloat(hoursSincePosted);
                  num_comments = $('#' + service.name + '_commentsNotable').val();
                  popupParcel.kiwi_servicesInfo[index].notableConditions.num_comments = parseInt(num_comments);
                }
                popupParcel.view = 'userPreferences';
                console.log('4567');
                parcel = {
                  refreshView: popupParcel.view,
                  newPopupParcel: popupParcel,
                  msg: 'kiwiPP_post_savePopupParcel'
                };
                return sendParcel(parcel);
              });
            };
          })(this)
        }
      };
    };

    return UserPreferences;

  })(View);

  Credits = (function(_super) {
    __extends(Credits, _super);

    function Credits(_at_name) {
      this.name = _at_name;
      this.__renderStates__ = __bind(this.__renderStates__, this);
      Credits.__super__.constructor.call(this, this.name, this.__renderStates__);
    }

    Credits.prototype.init = function(popupParcel) {
      this.unbindWidget();
      return this.render(popupParcel);
    };

    Credits.prototype.__renderStates__ = function() {
      return {
        normal: {
          paint: (function(_this) {
            return function(popupParcel) {
              return console.log('painting');
            };
          })(this)
        }
      };
    };

    return Credits;

  })(View);

  Views = {
    conversations: new Conversations('conversations'),
    userPreferences: new UserPreferences('userPreferences'),
    credits: new Credits('credits')
  };

  tailorResults = {
    gnews: function(serviceInfoObject, service_PreppedResults) {
      var currentTime, index, listing, preppedHTMLstring, recentTag, _i, _len, _time;
      currentTime = Date.now();
      preppedHTMLstring = "<br>" + serviceInfoObject.title + "<br>";
      if ((service_PreppedResults != null) && service_PreppedResults.length > 0) {
        preppedHTMLstring += "Searched for: " + service_PreppedResults[0].kiwi_searchedFor + "<br>";
      }
      service_PreppedResults = _.sortBy(service_PreppedResults, 'clusterUrl');
      service_PreppedResults.reverse();
      console.log('console.debug serviceResults.service_PreppedResults');
      console.debug(service_PreppedResults);
      for (index = _i = 0, _len = service_PreppedResults.length; _i < _len; index = ++_i) {
        listing = service_PreppedResults[index];
        recentTag = currentTime - listing.kiwi_created_at < 1000 * 60 * 60 * 4 ? "<span class='recentListing'>Recent: </span>" : "";
        preppedHTMLstring += '<div class="listing" style="position:relative;">' + recentTag + '<a class="listingTitle" target="_blank" href="' + listing.unescapedUrl + '">' + listing.titleNoFormatting + '<br>';
        _time = formatTime(listing.kiwi_created_at);
        preppedHTMLstring += listing.publisher + ' -- ' + _time + '</a> <br>' + listing.content + '<br>';
        if (listing.clusterUrl !== '') {
          preppedHTMLstring += '<a target="_blank" href="' + listing.clusterUrl + '"> Google News cluster </a>';
        }
        preppedHTMLstring += '</a> </div><br>';
      }
      return preppedHTMLstring;
    },
    hackerNews: function(serviceInfoObject, service_PreppedResults) {
      return tailorRedditAndHNresults_returnHtml(serviceInfoObject, service_PreppedResults);
    },
    reddit: function(serviceInfoObject, service_PreppedResults) {
      return tailorRedditAndHNresults_returnHtml(serviceInfoObject, service_PreppedResults);
    }
  };

  tailorRedditAndHNresults_returnHtml = function(serviceInfoObject, service_PreppedResults) {
    var currentTime, fuzzyMatchBool, index, listing, preppedHTMLstring, recentTag, _i, _j, _len, _len1, _time;
    preppedHTMLstring = '';
    currentTime = Date.now();
    fuzzyMatchBool = false;
    preppedHTMLstring += "<br>" + serviceInfoObject.title + "<br>";
    service_PreppedResults = _.sortBy(service_PreppedResults, 'num_comments');
    service_PreppedResults.reverse();
    for (index = _i = 0, _len = service_PreppedResults.length; _i < _len; index = ++_i) {
      listing = service_PreppedResults[index];
      recentTag = currentTime - listing.kiwi_created_at < 1000 * 60 * 60 * 4 ? "<span class='recentListing'>Recent: </span>" : "";
      if (serviceInfoObject.name === 'hackerNews') {
        if ((listing.title == null) || listing.title === '') {
          console.log('if !listing.title?');
          console.debug(listing);
        } else {
          console.log('console.log listing.title');
          console.log(listing.title);
        }
      }
      if (listing.kiwi_exact_match) {
        preppedHTMLstring += '<div class="listing" style="position:relative;">' + recentTag + '<a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.kiwi_permaId + '">';
        if ((listing.over_18 != null) && listing.over_18 === true) {
          preppedHTMLstring += '<span class="nsfw">NSFW</span>' + listing.title + '<br>';
        } else {
          preppedHTMLstring += listing.title + '<br>';
        }
        _time = formatTime(listing.kiwi_created_at);
        preppedHTMLstring += listing.num_comments + ' comments, ' + listing.kiwi_score + ' upvotes -- ' + _time + '</a>';
        if (listing.subreddit != null) {
          preppedHTMLstring += '<br><span> <a target="_blank" href="' + serviceInfoObject.permalinkBase + '/r/' + listing.subreddit + '"> subreddit: ' + listing.subreddit + '</a></span>';
        }
        preppedHTMLstring += '<div style="float:right;"> <a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a> </div></div><br>';
      } else {
        fuzzyMatchBool = true;
      }
    }
    if (fuzzyMatchBool) {
      preppedHTMLstring += '<br><div class="showFuzzyMatches" style="position:relative;"> Show fuzzy matches </div><br><span class="fuzzyMatches">';
      for (index = _j = 0, _len1 = service_PreppedResults.length; _j < _len1; index = ++_j) {
        listing = service_PreppedResults[index];
        if (!listing.kiwi_exact_match) {
          preppedHTMLstring += '<div class="listing"> <a class="listingTitle" target="_blank" href="' + serviceInfoObject.permalinkBase + listing.kiwi_permaId + '"> for Url: <span class="altURL">' + listing.url + '<br>';
          if ((listing.over_18 != null) && listing.over_18 === true) {
            preppedHTMLstring += '<span class="nsfw">NSFW</span>' + listing.title + '<br>';
          } else {
            preppedHTMLstring += listing.title + '<br>';
          }
          preppedHTMLstring += listing.num_comments + ' comments, ' + listing.kiwi_score + ' upvotes ' + formatTime(listing.kiwi_created_at) + '</a>';
          if (listing.subreddit != null) {
            preppedHTMLstring += '<br><span> <a target="_blank" href="' + serviceInfoObject.permalinkBase + '/r/' + listing.subreddit + '"> subreddit: ' + listing.subreddit + '</a></span> <div style="float:right;"> <a target="_blank" href="' + serviceInfoObject.userPageBaselink + listing.author + '"> by ' + listing.author + '</a></div>';
          }
          preppedHTMLstring += '</div><br>';
        }
      }
      preppedHTMLstring += "</span>";
    }
    return preppedHTMLstring;
  };

  bindGoToViewButtons = function(buttonEls, viewName, viewData) {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = buttonEls.length; _i < _len; _i++) {
      el = buttonEls[_i];
      _results.push($(el).bind('click', function(ev) {
        console.log('clicked ' + viewName);
        return Views[viewName].render(viewData);
      }));
    }
    return _results;
  };

  receiveParcel = function(parcel) {
    if (parcel.msg == null) {
      return false;
    }
    switch (parcel.msg) {
      case 'kiwiPP_popupParcel_ready':
        return chrome.tabs.query({
          currentWindow: true,
          active: true
        }, function(tabs) {
          var tabUrl;
          if (tabs.length > 0 && tabs[0].status === "complete") {
            if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
              tabUrl = tabs[0].url;
              if (tabs[0].url === parcel.forUrl) {
                console.log("when 'popupParcel_ready' parcel");
                console.debug(parcel);
                return initialize(parcel.popupParcel);
              }
            } else {
              console.log('chrome-devtools:// ');
              return 0;
            }
          }
        });
    }
  };

  sendParcel = function(parcel) {
    var port;
    console.log('wtf sent');
    port = chrome.extension.connect({
      name: "kiwi_fromBackgroundToPopup"
    });
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      if (tabs.length > 0 && tabs[0].status === "complete") {
        if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
          parcel.forUrl = tabs[0].url;
          if (parcel.msg == null) {
            return false;
          }
          switch (parcel.msg) {
            case 'kiwiPP_refreshSearchQuery':
              return port.postMessage(parcel);
            case 'kiwiPP_post_customSearch':
              return port.postMessage(parcel);
            case 'kiwiPP_request_popupParcel':
              return port.postMessage(parcel);
            case 'kiwiPP_post_savePopupParcel':
              return port.postMessage(parcel);
            case 'kiwiPP_post_save_a_la_carte':
              return port.postMessage(parcel);
            case 'kiwiPP_clearAllURLresults':
              return port.postMessage(parcel);
            case 'kiwiPP_refreshURLresults':
              return port.postMessage(parcel);
            case 'kiwiPP_researchUrlOverrideButton':
              return port.postMessage(parcel);
          }
        } else {
          console.log('chrome-devtools:// ');
          return 0;
        }
      }
    });
  };

  chrome.extension.onConnect.addListener(function(port) {
    if (port.name === 'kiwi_fromBackgroundToPopup') {
      return port.onMessage.addListener(function(pkg) {
        return receiveParcel(pkg);
      });
    }
  });

  moveArrayElement = function(array, from, to) {
    array.splice(to, 0, array.splice(from, 1)[0]);
    return array;
  };

  getRandom = function(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  formatTime = function(utcMillisecondTimestamp) {
    var a, amOrPm, date, hour, min, month, months, sec, time, year;
    a = new Date(utcMillisecondTimestamp);
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    year = a.getFullYear();
    month = months[a.getMonth()];
    date = a.getDate();
    hour = a.getHours();
    min = a.getMinutes();
    sec = a.getSeconds();
    amOrPm = hour > 11 ? 'pm' : 'am';
    if (hour > 12) {
      hour = hour - 12;
    } else if (parseInt(hour) === 0) {
      hour = 12;
    }
    if (min < 10) {
      min = '0' + min;
    }
    time = month + ' ' + date + ', ' + year + ' - ' + hour + ':' + min + amOrPm;
    return time;
  };

  renderExtensionHeight = function(elementSelector, extraPx) {
    var extHeight_;
    if (viewElementId === elementSelector) {
      extraPx = 2;
      extHeight_ = $(elementSelector).outerHeight() + extraPx;
      if (extHeight_ > 590) {
        extHeight_ = 590;
      }
      $('body').css('height', extHeight_ + 'px');
      heightString = extHeight_.toString() +'px';
      $('html').css('min-height', heightString);
      extHeight_--;
      return $('body').css('min-height', heightString);
    }
  };

  capitalizeFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  htmlEntities = function(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };

  getURLParam = function(oTarget, sVar) {
    return decodeURI(oTarget.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURI(sVar).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
  };

  console.log('trying to send123');

  $().ready(sendParcel({
    'msg': 'kiwiPP_request_popupParcel'
  }));

}).call(this);

// Generated by CoffeeScript 1.9.0
(function() {
  var CLEANUP_INTERVAL, checkForUrlHourInterval, checkForUrl_Persistent_ChromeNotification_HourInterval, check_updateServiceResults, defaultServicesInfo, defaultUserPreferences, dispatchQuery, getUrlResults_to_refreshBadgeIcon, initIfNewURL, initialize, kiwi_urlsResultsCache, last_periodicCleanup, maxUrlResultsStoredInLocalStorage, parseResults, periodicCleanup, popupOpen, popupParcel, queryThrottleSeconds, refreshBadge, returnNumberOfActiveServices, sendParcel, serviceQueryTimestamps, setPreppedServiceResults, tabUrl, tempResponsesStore, updateBadgeText, _exact_match_url_check, _save_a_la_carte, _save_from_popupParcel, _save_url_results, _set_popupParcel;

  console.log('wtf');

  tabUrl = '';

  popupOpen = false;

  checkForUrlHourInterval = 16;

  checkForUrl_Persistent_ChromeNotification_HourInterval = 3;

  last_periodicCleanup = 0;

  CLEANUP_INTERVAL = 3 * 3600000;

  queryThrottleSeconds = 2;

  serviceQueryTimestamps = {};

  maxUrlResultsStoredInLocalStorage = 800;

  kiwi_urlsResultsCache = {};

  tempResponsesStore = {};

  popupParcel = {};

  defaultUserPreferences = {
    fontSize: .8,
    researchMode: 'on',
    autoOffAtUTCmilliTimestamp: null,
    autoOffTimerType: 'always',
    autoOffTimerValue: null,
    urlSubstring_blacklist: ['facebook.com', 'news.ycombinator.com', 'reddit.com', 'https://www.google.com', 'http://www.google.com', 'docs.google', 'drive.google', 'accounts.google', 'chrome://', '.slack.com/', '//t.co', '//bit.ly', '//goo.gl', '//mail.google', '//mail.yahoo.com', 'hotmail.com', 'outlook.com']
  };

  defaultServicesInfo = [
    {
      name: "hackerNews",
      title: "Hacker News",
      abbreviation: "H",
      queryApi: "https://hn.algolia.com/api/v1/search?restrictSearchableAttributes=url&query=",
      broughtToYouByTitle: "Algolia Hacker News API",
      broughtToYouByURL: "https://hn.algolia.com/api",
      permalinkBase: 'https://news.ycombinator.com/item?id=',
      userPageBaselink: 'https://news.ycombinator.com/user?id=',
      active: true,
      notableConditions: {
        hoursSincePosted: 5,
        num_comments: 10
      },
      updateBadgeOnlyWithExactMatch: true
    }, {
      name: "reddit",
      title: "Reddit",
      abbreviation: "R",
      queryApi: "https://www.reddit.com/submit.json?url=",
      broughtToYouByTitle: "Reddit API",
      broughtToYouByURL: "https://github.com/reddit/reddit/wiki/API",
      permalinkBase: 'https://www.reddit.com',
      userPageBaselink: 'https://www.reddit.com/user/',
      active: true,
      notableConditions: {
        hoursSincePosted: 5,
        num_comments: 30
      },
      updateBadgeOnlyWithExactMatch: true
    }
  ];

  returnNumberOfActiveServices = function(servicesInfo) {
    var numberOfActiveServices, service, _i, _len;
    numberOfActiveServices = 0;
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (service.active) {
        numberOfActiveServices++;
      }
    }
    return numberOfActiveServices;
  };

  sendParcel = function(parcel) {
    var outPort;
    outPort = chrome.extension.connect({
      name: "kiwi_fromBackgroundToPopup"
    });
    if ((parcel.msg == null) || (parcel.forUrl == null)) {
      return false;
    }
    switch (parcel.msg) {
      case 'kiwiPP_popupParcel_ready':
        return outPort.postMessage(parcel);
    }
  };

  _save_a_la_carte = function(parcel) {
    var setObj;
    setObj = {};
    setObj[parcel.keyName] = parcel.newValue;
    return chrome.storage[parcel.localOrSync].set(setObj, function(data) {
      if (parcel.refreshView != null) {
        return _set_popupParcel(tempResponsesStore.services, tabUrl, true, parcel.refreshView);
      } else {
        return _set_popupParcel(tempResponsesStore.services, tabUrl, false);
      }
    });
  };

  chrome.extension.onConnect.addListener(function(port) {
    if (port.name === 'kiwi_fromBackgroundToPopup') {
      return port.onMessage.addListener(function(dataFromPopup) {
        var parcel;
        if (dataFromPopup.msg == null) {
          return false;
        }
        switch (dataFromPopup.msg) {
          case 'kiwiPP_post_addAlert':
            return popupOpen = true;
          case 'kiwiPP_post_save_a_la_carte':
            popupOpen = true;
            return _save_a_la_carte(dataFromPopup);
          case 'kiwiPP_post_savePopupParcel':
            popupOpen = true;
            _save_from_popupParcel(dataFromPopup.newPopupParcel, dataFromPopup.forUrl, dataFromPopup.refreshView);
            if (kiwi_urlsResultsCache[tabUrl] != null) {
              return refreshBadge(dataFromPopup.newPopupParcel.kiwi_servicesInfo, kiwi_urlsResultsCache[tabUrl]);
            }
            break;
          case 'kiwiPP_post_refreshQuery':
            return popupOpen = true;
          case 'kiwiPP_request_popupParcel':
            console.log(" when 'kiwiPP_request_popupParcel' ");
            popupOpen = true;
            console.log('dataFromPopup.forUrl' + dataFromPopup.forUrl);
            console.log('tabUrl:' + tabUrl);
            if (dataFromPopup.forUrl === tabUrl) {
              if ((popupParcel != null) && popupParcel.forUrl === tabUrl) {
                console.log("popup parcel ready");
                parcel = {};
                parcel.msg = 'kiwiPP_popupParcel_ready';
                parcel.forUrl = tabUrl;
                parcel.popupParcel = popupParcel;
                return sendParcel(parcel);
              } else {
                console.log("popup parcel not ready");
                if (tempResponsesStore.services == null) {
                  return _set_popupParcel({}, tabUrl, true);
                } else {
                  return _set_popupParcel(tempResponsesStore.services, tabUrl, true);
                }
              }
            }
        }
      });
    }
  });

  initialize = function(currentUrl) {
    console.log('yolo 1 ' + currentUrl);
    return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
      console.log('console.debug allItemsInLocalStorage');
      console.debug(allItemsInSyncedStorage);
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        return chrome.storage.sync.set({
          'kiwi_servicesInfo': defaultServicesInfo
        }, function(servicesInfo) {
          return getUrlResults_to_refreshBadgeIcon(defaultServicesInfo, currentUrl);
        });
      } else {
        return getUrlResults_to_refreshBadgeIcon(allItemsInSyncedStorage['kiwi_servicesInfo'], currentUrl);
      }
    });
  };

  getUrlResults_to_refreshBadgeIcon = function(servicesInfo, currentUrl) {
    var currentTime, sendPopupParcel, service, _i, _len;
    console.log('yolo 2  getUrlResults_to_refreshBadgeIcon');
    currentTime = Date.now();
    if (Object.keys(kiwi_urlsResultsCache).length > 0) {
      if (kiwi_urlsResultsCache[currentUrl] != null) {
        refreshBadge(servicesInfo, kiwi_urlsResultsCache[currentUrl]);
        for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
          service = servicesInfo[_i];
          if (kiwi_urlsResultsCache[currentUrl][service.name] != null) {
            if ((currentTime - kiwi_urlsResultsCache[currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
              check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
              return 0;
            }
          } else {
            check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
            return 0;
          }
        }
        tempResponsesStore.forUrl = currentUrl;
        tempResponsesStore.services = kiwi_urlsResultsCache[currentUrl];
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        console.log('console.debug tempResponsesStore.services');
        console.debug(tempResponsesStore.services);
        return _set_popupParcel(tempResponsesStore.services, currentUrl, sendPopupParcel);
      } else {
        return check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
      }
    } else {
      return check_updateServiceResults(servicesInfo, currentUrl, null);
    }
  };

  _save_url_results = function(servicesInfo, tempResponsesStore, urlsResultsCache) {
    var changedBool, debugResultsCache_beforeUpdate, previousUrl, service, _i, _len, _results;
    console.log('yolo 3');
    debugResultsCache_beforeUpdate = _.extend({}, urlsResultsCache);
    previousUrl = tempResponsesStore.forUrl;
    if (urlsResultsCache[previousUrl] != null) {
      changedBool = false;
      _results = [];
      for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
        service = servicesInfo[_i];
        if (tempResponsesStore.services[service.name] != null) {
          changedBool = true;
          _results.push(urlsResultsCache[previousUrl][service.name] = {
            forUrl: previousUrl,
            timestamp: tempResponsesStore.services[service.name].timestamp,
            service_PreppedResults: tempResponsesStore.services[service.name].service_PreppedResults
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      urlsResultsCache[previousUrl] = {};
      return urlsResultsCache[previousUrl] = tempResponsesStore.services;
    }
  };

  check_updateServiceResults = function(servicesInfo, currentUrl, urlsResultsCache) {
    var currentTime, previousResponsesStore, service, _i, _len, _results, _urlsResultsCache;
    if (urlsResultsCache == null) {
      urlsResultsCache = null;
    }
    console.log('yolo 4');
    if ((urlsResultsCache != null) && Object.keys(tempResponsesStore).length > 0) {
      previousResponsesStore = _.extend({}, tempResponsesStore);
      _urlsResultsCache = _.extend({}, urlsResultsCache);
      _save_url_results(servicesInfo, previousResponsesStore, _urlsResultsCache);
    }
    tempResponsesStore.forUrl = currentUrl;
    tempResponsesStore.services = {};
    currentTime = Date.now();
    if (urlsResultsCache == null) {
      urlsResultsCache = {};
    }
    if (urlsResultsCache[currentUrl] == null) {
      urlsResultsCache[currentUrl] = {};
    }
    console.log('about to check for dispatch query');
    console.debug(urlsResultsCache[currentUrl]);
    console.log('current time');
    console.log(currentTime);
    _results = [];
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (urlsResultsCache[currentUrl][service.name] != null) {
        if ((currentTime - urlsResultsCache[currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
          _results.push(dispatchQuery(service, currentUrl, servicesInfo));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(dispatchQuery(service, currentUrl, servicesInfo));
      }
    }
    return _results;
  };

  dispatchQuery = function(service_info, currentUrl, servicesInfo) {
    var currentTime, queryUrl;
    console.log('yolo 5');
    currentTime = Date.now();
    if (serviceQueryTimestamps[service_info.name] == null) {
      serviceQueryTimestamps[service_info.name] = currentTime;
    } else {
      if ((currentTime - serviceQueryTimestamps[service_info.name]) < queryThrottleSeconds * 1000) {
        console.log('too soon on dispatch, waiting a couple seconds');
        setTimeout(function() {
          return dispatchQuery(service_info, currentUrl, servicesInfo);
        }, 2000);
        return 0;
      } else {
        serviceQueryTimestamps[service_info.name] = currentTime;
      }
    }
    queryUrl = service_info.queryApi + encodeURIComponent(currentUrl);
    console.log('yolo 5 ' + queryUrl);
    return $.ajax(queryUrl, {
      success: function(queryResult) {
        var responsePackage;
        responsePackage = {
          forUrl: currentUrl,
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: queryResult
        };
        console.log('responsePackage');
        console.debug(responsePackage);
        return setPreppedServiceResults(responsePackage, servicesInfo);
      }
    });
  };

  _save_from_popupParcel = function(_popupParcel, forUrl, updateToView) {
    popupParcel = {};
    return chrome.storage.sync.set({
      'kiwi_userPreferences': _popupParcel.kiwi_userPreferences
    }, function() {
      return chrome.storage.sync.set({
        'kiwi_servicesInfo': _popupParcel.kiwi_servicesInfo
      }, function() {
        return chrome.storage.sync.set({
          'kiwi_alerts': _popupParcel.kiwi_alerts
        }, function() {
          var parcel;
          if (updateToView != null) {
            parcel = {};
            popupParcel = _popupParcel;
            parcel.msg = 'kiwiPP_popupParcel_ready';
            parcel.forUrl = tabUrl;
            parcel.popupParcel = _popupParcel;
            return sendParcel(parcel);
          }
        });
      });
    });
  };

  _set_popupParcel = function(setWith_urlResults, forUrl, sendPopupParcel, renderView) {
    var setObj_popupParcel;
    if (renderView == null) {
      renderView = null;
    }
    console.log('trying to set popupParcel, forUrl tabUrl');
    console.log(forUrl);
    console.log(tabUrl);
    if (setWith_urlResults !== {}) {
      if (forUrl !== tabUrl) {
        console.log("_set_popupParcel request for old url");
        return false;
      }
    }
    setObj_popupParcel = {};
    setObj_popupParcel.forUrl = tabUrl;
    return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
      var parcel;
      if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
        setObj_popupParcel.kiwi_userPreferences = defaultUserPreferences;
      } else {
        setObj_popupParcel.kiwi_userPreferences = allItemsInSyncedStorage['kiwi_userPreferences'];
      }
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        setObj_popupParcel.kiwi_servicesInfo = defaultServicesInfo;
      } else {
        setObj_popupParcel.kiwi_servicesInfo = allItemsInSyncedStorage['kiwi_servicesInfo'];
      }
      if (renderView !== null) {
        setObj_popupParcel.view = renderView;
      }
      if (allItemsInSyncedStorage['kiwi_alerts'] == null) {
        setObj_popupParcel.kiwi_alerts = [];
      } else {
        setObj_popupParcel.kiwi_alerts = allItemsInSyncedStorage['kiwi_alerts'];
      }
      if (setWith_urlResults == null) {
        console.log('_set_popupParcel called with undefined responses (not supposed to happen, ever)');
        return 0;
      } else {
        setObj_popupParcel.allPreppedResults = setWith_urlResults;
      }
      popupParcel = setObj_popupParcel;
      console.debug(popupParcel);
      if (sendPopupParcel) {
        parcel = {};
        parcel.msg = 'kiwiPP_popupParcel_ready';
        parcel.forUrl = tabUrl;
        parcel.popupParcel = setObj_popupParcel;
        return sendParcel(parcel);
      }
    });
  };

  setPreppedServiceResults = function(responsePackage, servicesInfo) {
    var currentTime, numberOfActiveServices, sendPopupParcel, service_PreppedResults;
    console.log('yolo 6');
    currentTime = Date.now();
    if (tabUrl === responsePackage.forUrl) {
      service_PreppedResults = parseResults[responsePackage.serviceName](responsePackage.queryResult, responsePackage.forUrl);
      tempResponsesStore.services[responsePackage.serviceName] = {
        timestamp: currentTime,
        service_PreppedResults: service_PreppedResults,
        forUrl: responsePackage.forUrl
      };
      console.log('yolo 6 results service_PreppedResults');
      console.debug(service_PreppedResults);
      console.log('Object.keys(tempResponsesStore.services).length');
      console.debug(Object.keys(tempResponsesStore.services).length);
      console.log('numberOfActiveServices');
      console.debug(returnNumberOfActiveServices(servicesInfo));
      numberOfActiveServices = returnNumberOfActiveServices(servicesInfo);
      if (Object.keys(tempResponsesStore.services).length === numberOfActiveServices && numberOfActiveServices !== 0) {
        chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
          return _save_url_results(allItemsInSyncedStorage['kiwi_servicesInfo'], tempResponsesStore, kiwi_urlsResultsCache);
        });
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        _set_popupParcel(tempResponsesStore.services, responsePackage.forUrl, sendPopupParcel);
        return refreshBadge(servicesInfo, tempResponsesStore.services);
      } else {
        _set_popupParcel(tempResponsesStore.services, responsePackage.forUrl, false);
        return refreshBadge(servicesInfo, tempResponsesStore.services);
      }
    }
  };

  parseResults = {
    reddit: function(resultsObj, forUrl) {
      var child, listingKeys, matchedListings, preppedResult, _i, _len, _ref;
      matchedListings = [];
      console.log('reddit: (resultsObj) ->');
      console.debug(resultsObj);
      if ((resultsObj.kind != null) && resultsObj.kind === "Listing" && (resultsObj.data != null) && (resultsObj.data.children != null) && resultsObj.data.children.length > 0) {
        _ref = resultsObj.data.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.data != null) {
            listingKeys = ["subreddit", 'url', "score", "over_18", "author", "hidden", "downs", "permalink", "created", "title", "created_utc", "ups", "num_comments"];
            preppedResult = _.pick(child.data, listingKeys);
            preppedResult.kiwi_created_at = preppedResult.created_utc * 1000;
            preppedResult.kiwi_exact_match = _exact_match_url_check(forUrl, preppedResult.url);
            preppedResult.kiwi_score = preppedResult.score;
            preppedResult.kiwi_permaId = preppedResult.permalink;
            matchedListings.push(preppedResult);
          }
        }
      }
      return matchedListings;
    },
    hackerNews: function(resultsObj, forUrl) {
      var hit, listingKeys, matchedListings, preppedResult, _i, _len, _ref;
      matchedListings = [];
      if ((resultsObj.nbHits != null) && resultsObj.nbHits > 0 && (resultsObj.hits != null) && resultsObj.hits.length === resultsObj.nbHits) {
        _ref = resultsObj.hits;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hit = _ref[_i];
          listingKeys = ["points", "num_comments", "objectID", "author", "created_at", "title", "url", "created_at_i"];
          preppedResult = _.pick(hit, listingKeys);
          preppedResult.kiwi_created_at = preppedResult.created_at_i * 1000;
          preppedResult.kiwi_exact_match = _exact_match_url_check(forUrl, preppedResult.url);
          preppedResult.kiwi_score = preppedResult.points;
          preppedResult.kiwi_permaId = preppedResult.objectID;
          matchedListings.push(preppedResult);
        }
      }
      return matchedListings;
    }
  };

  _exact_match_url_check = function(forUrl, preppedResultUrl) {
    var altUrl, cSindex, checkArray, checkString, existState, existState_, existState_Char, existState__, existStates, forUrlUnmodded, forUrl_, index, index_, kiwi_exact_match, m, mod, modKey, modPermutations, mod_, moddedUrl, modifications, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p;
    kiwi_exact_match = false;
    modifications = [
      {
        name: 'trailingSlash',
        modify: function(tOrF, forUrl) {
          var noTrailingSlashURL, trailingSlashURL;
          if (tOrF === 't') {
            if (forUrl[forUrl.length - 1] !== '/') {
              trailingSlashURL = forUrl + '/';
            } else {
              trailingSlashURL = forUrl;
            }
            return trailingSlashURL;
          } else {
            if (forUrl[forUrl.length - 1] === '/') {
              noTrailingSlashURL = forUrl.substr(0, forUrl.length - 1);
            } else {
              noTrailingSlashURL = forUrl;
            }
            return noTrailingSlashURL;
          }
        },
        existsTest: function(forUrl) {
          if (forUrl[forUrl.length - 1] === '/') {
            return 't';
          } else {
            return 'f';
          }
        }
      }, {
        name: 'www',
        modify: function(tOrF, forUrl) {
          var WWWurl, noWWWurl, protocolSplitUrlArray, wwwSplitUrlArray;
          if (tOrF === 't') {
            protocolSplitUrlArray = forUrl.split('://');
            if (protocolSplitUrlArray[1].indexOf('www.') !== 0) {
              protocolSplitUrlArray[1] = 'www.' + protocolSplitUrlArray[1];
              WWWurl = protocolSplitUrlArray.join('://');
            } else {
              WWWurl = forUrl;
            }
            return WWWurl;
          } else {
            wwwSplitUrlArray = forUrl.split('www.');
            if (wwwSplitUrlArray.length === 2) {
              noWWWurl = wwwSplitUrlArray.join('');
            } else if (wwwSplitUrlArray.length > 2) {
              noWWWurl = wwwSplitUrlArray.shift();
              noWWWurl += wwwSplitUrlArray.shift();
              noWWWurl += wwwSplitUrlArray.join('www.');
            } else {
              noWWWurl = forUrl;
            }
            return noWWWurl;
          }
        },
        existsTest: function(forUrl) {
          if (forUrl.split('//www.').length > 0) {
            return 't';
          } else {
            return 'f';
          }
        }
      }, {
        name: 'http',
        existsTest: function(forUrl) {
          if (forUrl.indexOf('http://') === 0) {
            return 't';
          } else {
            return 'f';
          }
        },
        modify: function(tOrF, forUrl) {
          var HTTPSurl, HTTPurl;
          if (tOrF === 't') {
            if (forUrl.indexOf('https://') === 0) {
              return HTTPurl = 'http://' + forUrl.substr(8, forUrl.length - 1);
            } else {
              return HTTPurl = forUrl;
            }
          } else {
            if (forUrl.indexOf('http://') === 0) {
              return HTTPSurl = 'https://' + forUrl.substr(7, forUrl.length - 1);
            } else {
              return HTTPSurl = forUrl;
            }
          }
        }
      }
    ];
    modPermutations = {};
    forUrlUnmodded = '';
    for (_i = 0, _len = modifications.length; _i < _len; _i++) {
      mod = modifications[_i];
      forUrlUnmodded += mod.existsTest(forUrl);
    }
    modPermutations[forUrlUnmodded] = forUrl;
    existStates = ['t', 'f'];
    for (_j = 0, _len1 = existStates.length; _j < _len1; _j++) {
      existState = existStates[_j];
      for (index = _k = 0, _len2 = modifications.length; _k < _len2; index = ++_k) {
        mod = modifications[index];
        checkArray = [];
        for (_l = 0, _len3 = modifications.length; _l < _len3; _l++) {
          m = modifications[_l];
          checkArray.push(existState);
        }
        forUrl_ = modifications[index].modify(existState, forUrl);
        for (_m = 0, _len4 = existStates.length; _m < _len4; _m++) {
          existState_ = existStates[_m];
          checkArray[index] = existState_;
          for (index_ = _n = 0, _len5 = modifications.length; _n < _len5; index_ = ++_n) {
            mod_ = modifications[index_];
            if (index !== index_) {
              for (_o = 0, _len6 = existStates.length; _o < _len6; _o++) {
                existState__ = existStates[_o];
                checkArray[index_] = existState__;
                checkString = checkArray.join('');
                if (modPermutations[checkString] == null) {
                  altUrl = forUrl_;
                  for (cSindex = _p = 0, _len7 = checkString.length; _p < _len7; cSindex = ++_p) {
                    existState_Char = checkString[cSindex];
                    altUrl = modifications[cSindex].modify(existState_Char, altUrl);
                  }
                  modPermutations[checkString] = altUrl;
                }
              }
            }
          }
        }
      }
    }
    kiwi_exact_match = false;
    if (preppedResultUrl === forUrl) {
      kiwi_exact_match = true;
    }
    for (modKey in modPermutations) {
      moddedUrl = modPermutations[modKey];
      if (preppedResultUrl === moddedUrl) {
        kiwi_exact_match = true;
      }
    }
    return kiwi_exact_match;
  };

  refreshBadge = function(servicesInfo, resultsObjForCurrentUrl) {
    var badgeText, currentTime, exactMatch, index, listing, noteworthy, service, updateCount, _i, _j, _len, _len1, _ref;
    console.log('yolo 8');
    console.debug(resultsObjForCurrentUrl);
    console.debug(servicesInfo);
    badgeText = '';
    currentTime = Date.now();
    if (Object.keys(resultsObjForCurrentUrl).length === 0) {
      chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
        if ((allItemsInSyncedStorage['kiwi_userPreferences'] != null) && allItemsInSyncedStorage['kiwi_userPreferences'].researchMode === 'off') {
          badgeText = 'off';
          updateBadgeText(badgeText);
          return 0;
        } else if (defaultUserPreferences.researchMode === 'off') {
          badgeText = 'off';
          updateBadgeText(badgeText);
          return 0;
        }
      });
    }
    updateCount = 0;
    for (index = _i = 0, _len = servicesInfo.length; _i < _len; index = ++_i) {
      service = servicesInfo[index];
      if (resultsObjForCurrentUrl[service.name]) {
        if (resultsObjForCurrentUrl[service.name].service_PreppedResults.length > 0) {
          exactMatch = false;
          noteworthy = false;
          _ref = resultsObjForCurrentUrl[service.name].service_PreppedResults;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            listing = _ref[_j];
            if (listing.kiwi_exact_match) {
              exactMatch = true;
              if ((listing.num_comments != null) && listing.num_comments >= service.notableConditions.num_comments) {
                noteworthy = true;
                break;
              }
              if ((currentTime - listing.kiwi_created_at) < service.notableConditions.hoursSincePosted * 3600000) {
                noteworthy = true;
                break;
              }
            }
          }
          if (service.updateBadgeOnlyWithExactMatch && (exactMatch = false)) {
            break;
          }
          if (updateCount !== 0) {
            badgeText += " ";
          }
          if (noteworthy) {
            badgeText += service.abbreviation;
          } else {
            badgeText += service.abbreviation.toLowerCase();
          }
          updateCount++;
        }
      }
    }
    console.log('yolo 8 ' + badgeText);
    if (badgeText !== '') {
      return updateBadgeText(badgeText);
    }
  };

  updateBadgeText = function(text) {
    return chrome.browserAction.setBadgeText({
      'text': text.toString()
    });
  };

  periodicCleanup = function(tab, allItemsInLocalStorage, allItemsInSyncedStorage, initialize_callback) {
    var cull_kiwi_urlsResultsCache, currentTime, deletedCount, num_results_to_delete, serviceKey, serviceResults, url, urlServiceResults;
    console.log('wtf a');
    currentTime = Date.now();
    if (last_periodicCleanup < (currentTime - CLEANUP_INTERVAL)) {
      last_periodicCleanup = currentTime;
      console.log('wtf b');
      if (Object.keys(kiwi_urlsResultsCache).length === 0) {
        console.log('wtf ba');
        return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
      } else {
        console.log('wtf bb');
        cull_kiwi_urlsResultsCache = _.extend({}, kiwi_urlsResultsCache);
        for (url in cull_kiwi_urlsResultsCache) {
          urlServiceResults = cull_kiwi_urlsResultsCache[url];
          for (serviceKey in urlServiceResults) {
            serviceResults = urlServiceResults[serviceKey];
            if (currentTime - serviceResults.timestamp > checkForUrlHourInterval) {
              delete kiwi_urlsResultsCache[url];
            }
          }
        }
        if (Object.keys(kiwi_urlsResultsCache).length > maxUrlResultsStoredInLocalStorage) {
          num_results_to_delete = Object.keys(kiwi_urlsResultsCache).length - maxUrlResultsStoredInLocalStorage;
          deletedCount = 0;
          cull_kiwi_urlsResultsCache = _.extend({}, kiwi_urlsResultsCache);
          for (url in cull_kiwi_urlsResultsCache) {
            urlServiceResults = cull_kiwi_urlsResultsCache[url];
            if (deleteCount >= num_results_to_delete) {
              break;
            }
            if (url !== tab.url) {
              delete kiwi_urlsResultsCache[url];
              deletedCount++;
            }
          }
          return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
        } else {
          return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
        }
      }
    } else {
      console.log('wtf c');
      return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
    }
  };

  initIfNewURL = function() {
    var _this;
    console.log('wtf 1');
    _this = this;
    popupOpen = false;
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var tabUrl_hash, tabUrl_hashWordArray;
      if (tabs.length > 0 && (tabs[0].url != null)) {
        if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
          tabUrl = tabs[0].url;
        } else {
          _set_popupParcel({}, tabUrl, false);
          console.log('chrome-devtools:// has been the only url visited so far');
          return 0;
        }
        tabUrl_hashWordArray = CryptoJS.SHA512(tabUrl);
        tabUrl_hash = tabUrl_hashWordArray.toString(CryptoJS.enc.Base64);
        return chrome.storage.local.get(null, function(allItemsInLocalStorage) {
          if ((allItemsInLocalStorage.persistentUrlHash == null) || allItemsInLocalStorage.persistentUrlHash !== tabUrl_hash) {
            updateBadgeText('');
            chrome.storage.local.set({
              'persistentUrlHash': tabUrl_hash
            }, function() {});
            console.log('popupParcel 123123');
            console.debug(popupParcel);
            return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
              console.log('allItemsInSyncedStorage123');
              console.debug(allItemsInSyncedStorage);
              if (allItemsInSyncedStorage.kiwi_userPreferences != null) {
                if (allItemsInSyncedStorage.kiwi_userPreferences.researchMode === 'off') {
                  updateBadgeText('off');
                  console.log('console.debug kiwi_urlsResultsCache');
                  console.debug(kiwi_urlsResultsCache);
                  if (tabUrl === tempResponsesStore.forUrl) {
                    if (kiwi_urlsResultsCache[tabUrl] != null) {
                      _set_popupParcel(kiwi_urlsResultsCache[tabUrl], tabUrl, false);
                      if (allItemsInSyncedStorage['kiwi_servicesInfo'] != null) {
                        refreshBadge(allItemsInSyncedStorage['kiwi_servicesInfo'], kiwi_urlsResultsCache[tabUrl]);
                      }
                    }
                  }
                  return 0;
                }
              }
              return periodicCleanup(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage, function(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage) {
                var urlSubstring, _i, _len, _ref;
                console.log('in initialize callback');
                if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
                  console.log("console.debug allItemsInSyncedStorage['kiwi_userPreferences']");
                  console.debug(allItemsInSyncedStorage['kiwi_userPreferences']);
                  return chrome.storage.sync.set({
                    'kiwi_userPreferences': defaultUserPreferences
                  }, function() {
                    var urlSubstring, _i, _len, _ref;
                    _ref = defaultUserPreferences.urlSubstring_blacklist;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      urlSubstring = _ref[_i];
                      if (tabUrl.indexOf(urlSubstring) !== -1) {
                        updateBadgeText('block');
                        console.log('# user is not interested in results for this url: ' + tabUrl);
                        _set_popupParcel({}, tabUrl, false);
                        return 0;
                      }
                    }
                    return initialize(tabUrl);
                  });
                } else {
                  console.log("allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklist");
                  console.debug(allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklist);
                  _ref = allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklist;
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    urlSubstring = _ref[_i];
                    if (tabUrl.indexOf(urlSubstring) !== -1) {
                      updateBadgeText('block');
                      console.log('# user is not interested in results for this url: ' + tabUrl);
                      _set_popupParcel({}, tabUrl, false);
                      return 0;
                    }
                  }
                  return initialize(tabUrl);
                }
              });
            });
          }
        });
      }
    });
  };

  chrome.tabs.onActivated.addListener(initIfNewURL);

  chrome.tabs.onUpdated.addListener(initIfNewURL);

  chrome.windows.onFocusChanged.addListener(initIfNewURL);

}).call(this);

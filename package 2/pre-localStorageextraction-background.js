// Generated by CoffeeScript 1.9.0
(function() {
  var CLEANUP_INTERVAL, checkForUrlHourInterval, checkForUrl_Persistent_ChromeNotification_HourInterval, check_updateServiceResults, defaultServicesInfo, defaultUserPreferences, dispatchQuery, getUrlResults_to_refreshBadgeIcon, initIfNewURL, initialize, kiwi_urlsResultsCache, last_periodicCleanup, maxUrlResultsStoredInLocalStorage, parseResults, periodicCleanup, popupOpen, popupParcel, queryThrottleSeconds, refreshBadge, returnNumberOfActiveServices, sendParcel, serviceQueryTimestamps, setPreppedServiceResults, tabUrl, tempResponsesStore, updateBadgeText, _exact_match_url_check, _save_a_la_carte, _save_from_popupParcel, _save_url_results, _set_popupParcel;

  console.log('wtf');

  tabUrl = '';

  popupOpen = false;

  checkForUrlHourInterval = 16;

  checkForUrl_Persistent_ChromeNotification_HourInterval = 3;

  last_periodicCleanup = 0;

  CLEANUP_INTERVAL = 3 * 3600000;

  queryThrottleSeconds = 2;

  serviceQueryTimestamps = {};

  maxUrlResultsStoredInLocalStorage = 800;

  kiwi_urlsResultsCache = {};

  tempResponsesStore = {};

  popupParcel = {};

  defaultUserPreferences = {
    fontSize: .8,
    researchMode: 'on',
    autoOffAtUTCmilliTimestamp: null,
    autoOffTimerType: 'always',
    autoOffTimerValue: null,
    urlSubstring_blacklist: ['facebook.com', 'news.ycombinator.com', 'reddit.com', 'https://www.google.com', 'http://www.google.com', 'docs.google', 'drive.google', 'accounts.google', 'chrome://', '.slack.com/', '//t.co', '//bit.ly', '//goo.gl', '//mail.google', '//mail.yahoo.com', 'hotmail.com', 'outlook.com']
  };

  defaultServicesInfo = [
    {
      name: "hackerNews",
      title: "Hacker News",
      abbreviation: "H",
      queryApi: "https://hn.algolia.com/api/v1/search?restrictSearchableAttributes=url&query=",
      broughtToYouByTitle: "Algolia Hacker News API",
      broughtToYouByURL: "https://hn.algolia.com/api",
      permalinkBase: 'https://news.ycombinator.com/item?id=',
      userPageBaselink: 'https://news.ycombinator.com/user?id=',
      active: true,
      notableConditions: {
        hoursSincePosted: 5,
        num_comments: 10
      },
      updateBadgeOnlyWithExactMatch: true
    }, {
      name: "reddit",
      title: "Reddit",
      abbreviation: "R",
      queryApi: "https://www.reddit.com/submit.json?url=",
      broughtToYouByTitle: "Reddit API",
      broughtToYouByURL: "https://github.com/reddit/reddit/wiki/API",
      permalinkBase: 'https://www.reddit.com',
      userPageBaselink: 'https://www.reddit.com/user/',
      active: true,
      notableConditions: {
        hoursSincePosted: 5,
        num_comments: 30
      },
      updateBadgeOnlyWithExactMatch: true
    }
  ];

  returnNumberOfActiveServices = function(servicesInfo) {
    var numberOfActiveServices, service, _i, _len;
    numberOfActiveServices = 0;
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (service.active) {
        numberOfActiveServices++;
      }
    }
    return numberOfActiveServices;
  };

  sendParcel = function(parcel) {
    var outPort;
    outPort = chrome.extension.connect({
      name: "kiwi_fromBackgroundToPopup"
    });
    if ((parcel.msg == null) || (parcel.forUrl == null)) {
      return false;
    }
    switch (parcel.msg) {
      case 'kiwiPP_popupParcel_ready':
        return outPort.postMessage(parcel);
    }
  };

  _save_a_la_carte = function(parcel) {
    var setObj;
    setObj = {};
    setObj[parcel.keyName] = parcel.newValue;
    return chrome.storage[parcel.localOrSync].set(setObj, function(data) {
      if (parcel.refreshView != null) {
        return _set_popupParcel(tempResponsesStore.services, tabUrl, true, parcel.refreshView);
      } else {
        return _set_popupParcel(tempResponsesStore.services, tabUrl, false);
      }
    });
  };

  chrome.extension.onConnect.addListener(function(port) {
    if (port.name === 'kiwi_fromBackgroundToPopup') {
      return port.onMessage.addListener(function(dataFromPopup) {
        var parcel;
        if (dataFromPopup.msg == null) {
          return false;
        }
        switch (dataFromPopup.msg) {
          case 'kiwiPP_post_addAlert':
            return popupOpen = true;
          case 'kiwiPP_post_save_a_la_carte':
            popupOpen = true;
            return _save_a_la_carte(dataFromPopup);
          case 'kiwiPP_post_savePopupParcel':
            popupOpen = true;
            _save_from_popupParcel(dataFromPopup.newPopupParcel, dataFromPopup.forUrl, dataFromPopup.refreshView);
            if (kiwi_urlsResultsCache[tabUrl] != null) {
              return refreshBadge(dataFromPopup.newPopupParcel.kiwi_servicesInfo, kiwi_urlsResultsCache[tabUrl]);
            }
            break;
          case 'kiwiPP_post_refreshQuery':
            return popupOpen = true;
          case 'kiwiPP_request_popupParcel':
            console.log(" when 'kiwiPP_request_popupParcel' ");
            popupOpen = true;
            console.log('dataFromPopup.forUrl' + dataFromPopup.forUrl);
            console.log('tabUrl:' + tabUrl);
            if (dataFromPopup.forUrl === tabUrl) {
              if ((popupParcel != null) && popupParcel.forUrl === tabUrl) {
                parcel = {};
                parcel.msg = 'kiwiPP_popupParcel_ready';
                parcel.forUrl = tabUrl;
                parcel.popupParcel = popupParcel;
                return sendParcel(parcel);
              } else {
                if (tempResponsesStore.services == null) {
                  return _set_popupParcel({}, tabUrl, true);
                } else {
                  return _set_popupParcel(tempResponsesStore.services, tabUrl, true);
                }
              }
            }
        }
      });
    }
  });

  initialize = function(currentUrl) {
    console.log('yolo 1 ' + currentUrl);
    return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
      console.log('console.debug allItemsInLocalStorage');
      console.debug(allItemsInSyncedStorage);
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        return chrome.storage.sync.set({
          'kiwi_servicesInfo': defaultServicesInfo
        }, function(servicesInfo) {
          return getUrlResults_to_refreshBadgeIcon(defaultServicesInfo, currentUrl);
        });
      } else {
        return getUrlResults_to_refreshBadgeIcon(allItemsInSyncedStorage['kiwi_servicesInfo'], currentUrl);
      }
    });
  };

  getUrlResults_to_refreshBadgeIcon = function(servicesInfo, currentUrl) {
    var currentTime, sendPopupParcel, service, _i, _len;
    console.log('yolo 2  getUrlResults_to_refreshBadgeIcon');
    currentTime = Date.now();
    if (Object.keys(kiwi_urlsResultsCache).length > 0) {
      if (kiwi_urlsResultsCache[currentUrl] != null) {
        refreshBadge(servicesInfo, kiwi_urlsResultsCache[currentUrl]);
        for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
          service = servicesInfo[_i];
          if (kiwi_urlsResultsCache[currentUrl][service.name] != null) {
            if ((currentTime - kiwi_urlsResultsCache[currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
              check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
              return 0;
            }
          } else {
            check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
            return 0;
          }
        }
        tempResponsesStore.forUrl = currentUrl;
        tempResponsesStore.services = kiwi_urlsResultsCache[currentUrl];
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        console.log('console.debug tempResponsesStore.services');
        console.debug(tempResponsesStore.services);
        return _set_popupParcel(tempResponsesStore.services, currentUrl, sendPopupParcel);
      } else {
        return check_updateServiceResults(servicesInfo, currentUrl, kiwi_urlsResultsCache);
      }
    } else {
      return check_updateServiceResults(servicesInfo, currentUrl, null);
    }
  };

  _save_url_results = function(servicesInfo, tempResponsesStore, urlsResultsCache) {
    var changedBool, debugResultsCache_beforeUpdate, previousUrl, service, _i, _len, _results;
    console.log('yolo 3');
    debugResultsCache_beforeUpdate = _.extend({}, urlsResultsCache);
    previousUrl = tempResponsesStore.forUrl;
    if (urlsResultsCache[previousUrl] != null) {
      changedBool = false;
      _results = [];
      for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
        service = servicesInfo[_i];
        if (tempResponsesStore.services[service.name] != null) {
          changedBool = true;
          _results.push(urlsResultsCache[previousUrl][service.name] = {
            forUrl: previousUrl,
            timestamp: tempResponsesStore.services[service.name].timestamp,
            service_PreppedResults: tempResponsesStore.services[service.name].service_PreppedResults
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      urlsResultsCache[previousUrl] = {};
      return urlsResultsCache[previousUrl] = tempResponsesStore.services;
    }
  };

  check_updateServiceResults = function(servicesInfo, currentUrl, urlsResultsCache) {
    var currentTime, previousResponsesStore, service, _i, _len, _results, _urlsResultsCache;
    if (urlsResultsCache == null) {
      urlsResultsCache = null;
    }
    console.log('yolo 4');
    if ((urlsResultsCache != null) && Object.keys(tempResponsesStore).length > 0) {
      previousResponsesStore = _.extend({}, tempResponsesStore);
      _urlsResultsCache = _.extend({}, urlsResultsCache);
      _save_url_results(servicesInfo, previousResponsesStore, _urlsResultsCache);
    }
    tempResponsesStore.forUrl = currentUrl;
    tempResponsesStore.services = {};
    currentTime = Date.now();
    if (urlsResultsCache == null) {
      urlsResultsCache = {};
    }
    if (urlsResultsCache[currentUrl] == null) {
      urlsResultsCache[currentUrl] = {};
    }
    console.log('about to check for dispatch query');
    console.debug(urlsResultsCache[currentUrl]);
    console.log('current time');
    console.log(currentTime);
    _results = [];
    for (_i = 0, _len = servicesInfo.length; _i < _len; _i++) {
      service = servicesInfo[_i];
      if (urlsResultsCache[currentUrl][service.name] != null) {
        if ((currentTime - urlsResultsCache[currentUrl][service.name].timestamp) > checkForUrlHourInterval * 3600000) {
          _results.push(dispatchQuery(service, currentUrl, servicesInfo));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(dispatchQuery(service, currentUrl, servicesInfo));
      }
    }
    return _results;
  };

  dispatchQuery = function(service_info, currentUrl, servicesInfo) {
    var currentTime, queryUrl;
    console.log('yolo 5');
    currentTime = Date.now();
    if (serviceQueryTimestamps[service_info.name] == null) {
      serviceQueryTimestamps[service_info.name] = currentTime;
    } else {
      if ((currentTime - serviceQueryTimestamps[service_info.name]) < queryThrottleSeconds * 1000) {
        console.log('too soon on dispatch, waiting a couple seconds');
        setTimeout(function() {
          return dispatchQuery(service_info, currentUrl, servicesInfo);
        }, 2000);
        return 0;
      } else {
        serviceQueryTimestamps[service_info.name] = currentTime;
      }
    }
    queryUrl = service_info.queryApi + encodeURIComponent(currentUrl);
    console.log('yolo 5 ' + queryUrl);
    return $.ajax(queryUrl, {
      success: function(queryResult) {
        var responsePackage;
        responsePackage = {
          forUrl: currentUrl,
          servicesInfo: servicesInfo,
          serviceName: service_info.name,
          queryResult: queryResult
        };
        console.log('responsePackage');
        console.debug(responsePackage);
        return setPreppedServiceResults(responsePackage, servicesInfo);
      }
    });
  };

  _save_from_popupParcel = function(_popupParcel, forUrl, updateToView) {
    popupParcel = {};
    return chrome.storage.sync.set({
      'kiwi_userPreferences': _popupParcel.kiwi_userPreferences
    }, function() {
      return chrome.storage.sync.set({
        'kiwi_servicesInfo': _popupParcel.kiwi_servicesInfo
      }, function() {
        return chrome.storage.sync.set({
          'kiwi_alerts': _popupParcel.kiwi_alerts
        }, function() {
          var parcel;
          if (updateToView != null) {
            parcel = {};
            popupParcel = _popupParcel;
            parcel.msg = 'kiwiPP_popupParcel_ready';
            parcel.forUrl = tabUrl;
            parcel.popupParcel = _popupParcel;
            return sendParcel(parcel);
          }
        });
      });
    });
  };

  _set_popupParcel = function(setWith_urlResults, forUrl, sendPopupParcel, renderView) {
    var setObj_popupParcel;
    if (renderView == null) {
      renderView = null;
    }
    console.log('trying to set popupParcel, forUrl tabUrl');
    console.log(forUrl);
    console.log(tabUrl);
    if (setWith_urlResults !== {}) {
      if (forUrl !== tabUrl) {
        console.log("_set_popupParcel request for old url");
        return false;
      }
    }
    setObj_popupParcel = {};
    setObj_popupParcel.forUrl = tabUrl;
    return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
      var parcel;
      if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
        setObj_popupParcel.kiwi_userPreferences = defaultUserPreferences;
      } else {
        setObj_popupParcel.kiwi_userPreferences = allItemsInSyncedStorage['kiwi_userPreferences'];
      }
      if (allItemsInSyncedStorage['kiwi_servicesInfo'] == null) {
        setObj_popupParcel.kiwi_servicesInfo = defaultServicesInfo;
      } else {
        setObj_popupParcel.kiwi_servicesInfo = allItemsInSyncedStorage['kiwi_servicesInfo'];
      }
      if (renderView !== null) {
        setObj_popupParcel.view = renderView;
      }
      if (allItemsInSyncedStorage['kiwi_alerts'] == null) {
        setObj_popupParcel.kiwi_alerts = [];
      } else {
        setObj_popupParcel.kiwi_alerts = allItemsInSyncedStorage['kiwi_alerts'];
      }
      if (setWith_urlResults == null) {
        console.log('_set_popupParcel called with undefined responses (not supposed to happen, ever)');
        return 0;
      } else {
        setObj_popupParcel.allPreppedResults = setWith_urlResults;
      }
      popupParcel = setObj_popupParcel;
      console.debug(popupParcel);
      if (sendPopupParcel) {
        parcel = {};
        parcel.msg = 'kiwiPP_popupParcel_ready';
        parcel.forUrl = tabUrl;
        parcel.popupParcel = setObj_popupParcel;
        return sendParcel(parcel);
      }
    });
  };

  setPreppedServiceResults = function(responsePackage, servicesInfo) {
    var currentTime, numberOfActiveServices, sendPopupParcel, service_PreppedResults;
    console.log('yolo 6');
    currentTime = Date.now();
    if (tabUrl === responsePackage.forUrl) {
      service_PreppedResults = parseResults[responsePackage.serviceName](responsePackage.queryResult, responsePackage.forUrl);
      tempResponsesStore.services[responsePackage.serviceName] = {
        timestamp: currentTime,
        service_PreppedResults: service_PreppedResults,
        forUrl: responsePackage.forUrl
      };
      console.log('yolo 6 results service_PreppedResults');
      console.debug(service_PreppedResults);
      console.log('Object.keys(tempResponsesStore.services).length');
      console.debug(Object.keys(tempResponsesStore.services).length);
      console.log('numberOfActiveServices');
      console.debug(returnNumberOfActiveServices(servicesInfo));
      numberOfActiveServices = returnNumberOfActiveServices(servicesInfo);
      if (Object.keys(tempResponsesStore.services).length === numberOfActiveServices && numberOfActiveServices !== 0) {
        chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
          return _save_url_results(allItemsInSyncedStorage['kiwi_servicesInfo'], tempResponsesStore, kiwi_urlsResultsCache);
        });
        if (popupOpen) {
          sendPopupParcel = true;
        } else {
          sendPopupParcel = false;
        }
        _set_popupParcel(tempResponsesStore.services, responsePackage.forUrl, sendPopupParcel);
        return refreshBadge(servicesInfo, tempResponsesStore.services);
      } else {
        _set_popupParcel(tempResponsesStore.services, responsePackage.forUrl, false);
        return refreshBadge(servicesInfo, tempResponsesStore.services);
      }
    }
  };

  parseResults = {
    reddit: function(resultsObj, forUrl) {
      var child, listingKeys, matchedListings, preppedResult, _i, _len, _ref;
      matchedListings = [];
      console.log('reddit: (resultsObj) ->');
      console.debug(resultsObj);
      if ((resultsObj.kind != null) && resultsObj.kind === "Listing" && (resultsObj.data != null) && (resultsObj.data.children != null) && resultsObj.data.children.length > 0) {
        _ref = resultsObj.data.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.data != null) {
            listingKeys = ["subreddit", 'url', "score", "over_18", "author", "hidden", "downs", "permalink", "created", "title", "created_utc", "ups", "num_comments"];
            preppedResult = _.pick(child.data, listingKeys);
            preppedResult.kiwi_created_at = preppedResult.created_utc * 1000;
            preppedResult.kiwi_exact_match = _exact_match_url_check(forUrl, preppedResult.url);
            preppedResult.kiwi_score = preppedResult.score;
            preppedResult.kiwi_permaId = preppedResult.permalink;
            matchedListings.push(preppedResult);
          }
        }
      }
      return matchedListings;
    },
    hackerNews: function(resultsObj, forUrl) {
      var hit, listingKeys, matchedListings, preppedResult, _i, _len, _ref;
      matchedListings = [];
      if ((resultsObj.nbHits != null) && resultsObj.nbHits > 0 && (resultsObj.hits != null) && resultsObj.hits.length === resultsObj.nbHits) {
        _ref = resultsObj.hits;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hit = _ref[_i];
          listingKeys = ["points", "num_comments", "objectID", "author", "created_at", "title", "url", "created_at_i"];
          preppedResult = _.pick(hit, listingKeys);
          preppedResult.kiwi_created_at = preppedResult.created_at_i * 1000;
          preppedResult.kiwi_exact_match = _exact_match_url_check(forUrl, preppedResult.url);
          preppedResult.kiwi_score = preppedResult.points;
          preppedResult.kiwi_permaId = preppedResult.objectID;
          matchedListings.push(preppedResult);
        }
      }
      return matchedListings;
    }
  };

  _exact_match_url_check = function(forUrl, preppedResultUrl) {
    var altUrl, cSindex, checkArray, checkString, existState, existState_, existState_Char, existState__, existStates, forUrlUnmodded, forUrl_, index, index_, kiwi_exact_match, m, mod, modKey, modPermutations, mod_, moddedUrl, modifications, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p;
    kiwi_exact_match = false;
    modifications = [
      {
        name: 'trailingSlash',
        modify: function(tOrF, forUrl) {
          var noTrailingSlashURL, trailingSlashURL;
          if (tOrF === 't') {
            if (forUrl[forUrl.length - 1] !== '/') {
              trailingSlashURL = forUrl + '/';
            } else {
              trailingSlashURL = forUrl;
            }
            return trailingSlashURL;
          } else {
            if (forUrl[forUrl.length - 1] === '/') {
              noTrailingSlashURL = forUrl.substr(0, forUrl.length - 1);
            } else {
              noTrailingSlashURL = forUrl;
            }
            return noTrailingSlashURL;
          }
        },
        existsTest: function(forUrl) {
          if (forUrl[forUrl.length - 1] === '/') {
            return 't';
          } else {
            return 'f';
          }
        }
      }, {
        name: 'www',
        modify: function(tOrF, forUrl) {
          var WWWurl, noWWWurl, protocolSplitUrlArray, wwwSplitUrlArray;
          if (tOrF === 't') {
            protocolSplitUrlArray = forUrl.split('://');
            if (protocolSplitUrlArray[1].indexOf('www.') !== 0) {
              protocolSplitUrlArray[1] = 'www.' + protocolSplitUrlArray[1];
              WWWurl = protocolSplitUrlArray.join('://');
            } else {
              WWWurl = forUrl;
            }
            return WWWurl;
          } else {
            wwwSplitUrlArray = forUrl.split('www.');
            if (wwwSplitUrlArray.length === 2) {
              noWWWurl = wwwSplitUrlArray.join('');
            } else if (wwwSplitUrlArray.length > 2) {
              noWWWurl = wwwSplitUrlArray.shift();
              noWWWurl += wwwSplitUrlArray.shift();
              noWWWurl += wwwSplitUrlArray.join('www.');
            } else {
              noWWWurl = forUrl;
            }
            return noWWWurl;
          }
        },
        existsTest: function(forUrl) {
          if (forUrl.split('//www.').length > 0) {
            return 't';
          } else {
            return 'f';
          }
        }
      }, {
        name: 'http',
        existsTest: function(forUrl) {
          if (forUrl.indexOf('http://') === 0) {
            return 't';
          } else {
            return 'f';
          }
        },
        modify: function(tOrF, forUrl) {
          var HTTPSurl, HTTPurl;
          if (tOrF === 't') {
            if (forUrl.indexOf('https://') === 0) {
              return HTTPurl = 'http://' + forUrl.substr(8, forUrl.length - 1);
            } else {
              return HTTPurl = forUrl;
            }
          } else {
            if (forUrl.indexOf('http://') === 0) {
              return HTTPSurl = 'https://' + forUrl.substr(7, forUrl.length - 1);
            } else {
              return HTTPSurl = forUrl;
            }
          }
        }
      }
    ];
    modPermutations = {};
    forUrlUnmodded = '';
    for (_i = 0, _len = modifications.length; _i < _len; _i++) {
      mod = modifications[_i];
      forUrlUnmodded += mod.existsTest(forUrl);
    }
    modPermutations[forUrlUnmodded] = forUrl;
    existStates = ['t', 'f'];
    for (_j = 0, _len1 = existStates.length; _j < _len1; _j++) {
      existState = existStates[_j];
      for (index = _k = 0, _len2 = modifications.length; _k < _len2; index = ++_k) {
        mod = modifications[index];
        checkArray = [];
        for (_l = 0, _len3 = modifications.length; _l < _len3; _l++) {
          m = modifications[_l];
          checkArray.push(existState);
        }
        forUrl_ = modifications[index].modify(existState, forUrl);
        for (_m = 0, _len4 = existStates.length; _m < _len4; _m++) {
          existState_ = existStates[_m];
          checkArray[index] = existState_;
          for (index_ = _n = 0, _len5 = modifications.length; _n < _len5; index_ = ++_n) {
            mod_ = modifications[index_];
            if (index !== index_) {
              for (_o = 0, _len6 = existStates.length; _o < _len6; _o++) {
                existState__ = existStates[_o];
                checkArray[index_] = existState__;
                checkString = checkArray.join('');
                if (modPermutations[checkString] == null) {
                  altUrl = forUrl_;
                  for (cSindex = _p = 0, _len7 = checkString.length; _p < _len7; cSindex = ++_p) {
                    existState_Char = checkString[cSindex];
                    altUrl = modifications[cSindex].modify(existState_Char, altUrl);
                  }
                  modPermutations[checkString] = altUrl;
                }
              }
            }
          }
        }
      }
    }
    kiwi_exact_match = false;
    if (preppedResultUrl === forUrl) {
      kiwi_exact_match = true;
    }
    for (modKey in modPermutations) {
      moddedUrl = modPermutations[modKey];
      if (preppedResultUrl === moddedUrl) {
        kiwi_exact_match = true;
      }
    }
    console.log('preppedResultUrl');
    console.log(preppedResultUrl);
    console.log('kiwi_exact_match');
    console.log(kiwi_exact_match);
    return kiwi_exact_match;
  };

  refreshBadge = function(servicesInfo, resultsObjForCurrentUrl) {
    var badgeText, currentTime, exactMatch, index, listing, noteworthy, service, updateCount, _i, _j, _len, _len1, _ref;
    console.log('yolo 8');
    console.debug(resultsObjForCurrentUrl);
    console.debug(servicesInfo);
    badgeText = '';
    currentTime = Date.now();
    if (Object.keys(resultsObjForCurrentUrl).length === 0) {
      chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
        if ((allItemsInSyncedStorage['kiwi_userPreferences'] != null) && allItemsInSyncedStorage['kiwi_userPreferences'].researchMode === 'off') {
          badgeText = 'off';
          updateBadgeText(badgeText);
          return 0;
        } else if (defaultUserPreferences.researchMode === 'off') {
          badgeText = 'off';
          updateBadgeText(badgeText);
          return 0;
        }
      });
    }
    updateCount = 0;
    for (index = _i = 0, _len = servicesInfo.length; _i < _len; index = ++_i) {
      service = servicesInfo[index];
      if (resultsObjForCurrentUrl[service.name]) {
        if (resultsObjForCurrentUrl[service.name].service_PreppedResults.length > 0) {
          exactMatch = false;
          noteworthy = false;
          _ref = resultsObjForCurrentUrl[service.name].service_PreppedResults;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            listing = _ref[_j];
            if (listing.kiwi_exact_match) {
              exactMatch = true;
              if ((listing.num_comments != null) && listing.num_comments >= service.notableConditions.num_comments) {
                noteworthy = true;
                break;
              }
              if ((currentTime - listing.kiwi_created_at) < service.notableConditions.hoursSincePosted * 3600000) {
                noteworthy = true;
                break;
              }
            }
          }
          if (service.updateBadgeOnlyWithExactMatch && (exactMatch = false)) {
            break;
          }
          if (updateCount !== 0) {
            badgeText += " ";
          }
          if (noteworthy) {
            badgeText += service.abbreviation;
          } else {
            badgeText += service.abbreviation.toLowerCase();
          }
          updateCount++;
        }
      }
    }
    console.log('yolo 8 ' + badgeText);
    if (badgeText !== '') {
      return updateBadgeText(badgeText);
    }
  };

  updateBadgeText = function(text) {
    return chrome.browserAction.setBadgeText({
      'text': text.toString()
    });
  };

  periodicCleanup = function(tab, allItemsInLocalStorage, allItemsInSyncedStorage, initialize_callback) {
    var cull_kiwi_urlsResultsCache, currentTime, deletedCount, num_results_to_delete, serviceKey, serviceResults, url, urlServiceResults;
    console.log('wtf a');
    currentTime = Date.now();
    if (last_periodicCleanup < (currentTime - CLEANUP_INTERVAL)) {
      last_periodicCleanup = currentTime;
      console.log('wtf b');
      if (Object.keys(kiwi_urlsResultsCache).length === 0) {
        console.log('wtf ba');
        return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
      } else {
        console.log('wtf bb');
        cull_kiwi_urlsResultsCache = _.extend({}, kiwi_urlsResultsCache);
        for (url in cull_kiwi_urlsResultsCache) {
          urlServiceResults = cull_kiwi_urlsResultsCache[url];
          for (serviceKey in urlServiceResults) {
            serviceResults = urlServiceResults[serviceKey];
            if (currentTime - serviceResults.timestamp > checkForUrlHourInterval) {
              delete kiwi_urlsResultsCache[url];
            }
          }
        }
        if (Object.keys(kiwi_urlsResultsCache).length > maxUrlResultsStoredInLocalStorage) {
          num_results_to_delete = Object.keys(kiwi_urlsResultsCache).length - maxUrlResultsStoredInLocalStorage;
          deletedCount = 0;
          cull_kiwi_urlsResultsCache = _.extend({}, kiwi_urlsResultsCache);
          for (url in cull_kiwi_urlsResultsCache) {
            urlServiceResults = cull_kiwi_urlsResultsCache[url];
            if (deleteCount >= num_results_to_delete) {
              break;
            }
            if (url !== tab.url) {
              delete kiwi_urlsResultsCache[url];
              deletedCount++;
            }
          }
          return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
        } else {
          return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
        }
      }
    } else {
      console.log('wtf c');
      return initialize_callback(tab, allItemsInLocalStorage, allItemsInSyncedStorage);
    }
  };

  initIfNewURL = function() {
    var _this;
    console.log('wtf 1');
    _this = this;
    
  if(!window['googleLT_']){window['googleLT_']=(new Date()).getTime();}if (!window['google']) {
  window['google'] = {};
  }
  if (!window['google']['loader']) {
  window['google']['loader'] = {};
  google.loader.ServiceBase = 'https://www.google.com/uds';
  google.loader.GoogleApisBase = 'https://ajax.googleapis.com/ajax';
  google.loader.ApiKey = 'notsupplied';
  google.loader.KeyVerified = true;
  google.loader.LoadFailure = false;
  google.loader.Secure = true;
  google.loader.GoogleLocale = 'www.google.com';
  google.loader.ClientLocation = null;
  google.loader.AdditionalParams = '';
  (function() {var d=encodeURIComponent,g=window,h=document;function l(a,b){return a.load=b}var m="replace",n="charAt",q="getTime",r="setTimeout",u="push",v="indexOf",w="ServiceBase",x="name",y="length",z="prototype",A="loader",B="substring",C="join",D="toLowerCase";function E(a){return a in F?F[a]:F[a]=-1!=navigator.userAgent[D]()[v](a)}var F={};function G(a,b){var c=function(){};c.prototype=b[z];a.U=b[z];a.prototype=new c}
  function H(a,b,c){var e=Array[z].slice.call(arguments,2)||[];return function(){return a.apply(b,e.concat(Array[z].slice.call(arguments)))}}function I(a){a=Error(a);a.toString=function(){return this.message};return a}function J(a,b){for(var c=a.split(/\./),e=g,f=0;f<c[y]-1;f++)e[c[f]]||(e[c[f]]={}),e=e[c[f]];e[c[c[y]-1]]=b}function K(a,b,c){a[b]=c}if(!L)var L=J;if(!M)var M=K;google[A].t={};L("google.loader.callbacks",google[A].t);var N={},O={};google[A].eval={};L("google.loader.eval",google[A].eval);
  l(google,function(a,b,c){function e(a){var b=a.split(".");if(2<b[y])throw I("Module: '"+a+"' not found!");"undefined"!=typeof b[1]&&(f=b[0],c.packages=c.packages||[],c.packages[u](b[1]))}var f=a;c=c||{};if(a instanceof Array||a&&"object"==typeof a&&"function"==typeof a[C]&&"function"==typeof a.reverse)for(var k=0;k<a[y];k++)e(a[k]);else e(a);if(a=N[":"+f]){c&&!c.language&&c.locale&&(c.language=c.locale);c&&"string"==typeof c.callback&&(k=c.callback,k.match(/^[[\]A-Za-z0-9._]+$/)&&(k=g.eval(k),c.callback=
  k));if((k=c&&null!=c.callback)&&!a.s(b))throw I("Module: '"+f+"' must be loaded before DOM onLoad!");k?a.m(b,c)?g[r](c.callback,0):a.load(b,c):a.m(b,c)||a.load(b,c)}else throw I("Module: '"+f+"' not found!");});L("google.load",google.load);
  google.T=function(a,b){b?(0==P[y]&&(Q(g,"load",R),!E("msie")&&!E("safari")&&!E("konqueror")&&E("mozilla")||g.opera?g.addEventListener("DOMContentLoaded",R,!1):E("msie")?h.write("<script defer onreadystatechange='google.loader.domReady()' src=//:>\x3c/script>"):(E("safari")||E("konqueror"))&&g[r](aa,10)),P[u](a)):Q(g,"load",a)};L("google.setOnLoadCallback",google.T);
  function Q(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent("on"+b,c);else{var e=a["on"+b];a["on"+b]=null!=e?ba([c,e]):c}}function ba(a){return function(){for(var b=0;b<a[y];b++)a[b]()}}var P=[];google[A].N=function(){var a=g.event.srcElement;"complete"==a.readyState&&(a.onreadystatechange=null,a.parentNode.removeChild(a),R())};L("google.loader.domReady",google[A].N);var ca={loaded:!0,complete:!0};function aa(){ca[h.readyState]?R():0<P[y]&&g[r](aa,10)}
  function R(){for(var a=0;a<P[y];a++)P[a]();P.length=0}google[A].d=function(a,b,c){if(c){var e;"script"==a?(e=h.createElement("script"),e.type="text/javascript",e.src=b):"css"==a&&(e=h.createElement("link"),e.type="text/css",e.href=b,e.rel="stylesheet");(a=h.getElementsByTagName("head")[0])||(a=h.body.parentNode.appendChild(h.createElement("head")));a.appendChild(e)}else"script"==a?h.write('<script src="'+b+'" type="text/javascript">\x3c/script>'):"css"==a&&h.write('<link href="'+b+'" type="text/css" rel="stylesheet"></link>')};
  L("google.loader.writeLoadTag",google[A].d);google[A].Q=function(a){O=a};L("google.loader.rfm",google[A].Q);google[A].S=function(a){for(var b in a)"string"==typeof b&&b&&":"==b[n](0)&&!N[b]&&(N[b]=new T(b[B](1),a[b]))};L("google.loader.rpl",google[A].S);google[A].R=function(a){if((a=a.specs)&&a[y])for(var b=0;b<a[y];++b){var c=a[b];"string"==typeof c?N[":"+c]=new U(c):(c=new V(c[x],c.baseSpec,c.customSpecs),N[":"+c[x]]=c)}};L("google.loader.rm",google[A].R);google[A].loaded=function(a){N[":"+a.module].k(a)};
  L("google.loader.loaded",google[A].loaded);google[A].M=function(){return"qid="+((new Date)[q]().toString(16)+Math.floor(1E7*Math.random()).toString(16))};L("google.loader.createGuidArg_",google[A].M);J("google_exportSymbol",J);J("google_exportProperty",K);google[A].a={};L("google.loader.themes",google[A].a);google[A].a.B="//www.google.com/cse/style/look/bubblegum.css";M(google[A].a,"BUBBLEGUM",google[A].a.B);google[A].a.D="//www.google.com/cse/style/look/greensky.css";M(google[A].a,"GREENSKY",google[A].a.D);
  google[A].a.C="//www.google.com/cse/style/look/espresso.css";M(google[A].a,"ESPRESSO",google[A].a.C);google[A].a.G="//www.google.com/cse/style/look/shiny.css";M(google[A].a,"SHINY",google[A].a.G);google[A].a.F="//www.google.com/cse/style/look/minimalist.css";M(google[A].a,"MINIMALIST",google[A].a.F);google[A].a.H="//www.google.com/cse/style/look/v2/default.css";M(google[A].a,"V2_DEFAULT",google[A].a.H);function U(a){this.b=a;this.q=[];this.p={};this.i={};this.e={};this.l=!0;this.c=-1}
  U[z].g=function(a,b){var c="";void 0!=b&&(void 0!=b.language&&(c+="&hl="+d(b.language)),void 0!=b.nocss&&(c+="&output="+d("nocss="+b.nocss)),void 0!=b.nooldnames&&(c+="&nooldnames="+d(b.nooldnames)),void 0!=b.packages&&(c+="&packages="+d(b.packages)),null!=b.callback&&(c+="&async=2"),void 0!=b.style&&(c+="&style="+d(b.style)),void 0!=b.noexp&&(c+="&noexp=true"),void 0!=b.other_params&&(c+="&"+b.other_params));if(!this.l){google[this.b]&&google[this.b].JSHash&&(c+="&sig="+d(google[this.b].JSHash));
  var e=[],f;for(f in this.p)":"==f[n](0)&&e[u](f[B](1));for(f in this.i)":"==f[n](0)&&this.i[f]&&e[u](f[B](1));c+="&have="+d(e[C](","))}return google[A][w]+"/?file="+this.b+"&v="+a+google[A].AdditionalParams+c};U[z].v=function(a){var b=null;a&&(b=a.packages);var c=null;if(b)if("string"==typeof b)c=[a.packages];else if(b[y])for(c=[],a=0;a<b[y];a++)"string"==typeof b[a]&&c[u](b[a][m](/^\s*|\s*$/,"")[D]());c||(c=["default"]);b=[];for(a=0;a<c[y];a++)this.p[":"+c[a]]||b[u](c[a]);return b};
  l(U[z],function(a,b){var c=this.v(b),e=b&&null!=b.callback;if(e)var f=new W(b.callback);for(var k=[],p=c[y]-1;0<=p;p--){var t=c[p];e&&f.I(t);if(this.i[":"+t])c.splice(p,1),e&&this.e[":"+t][u](f);else k[u](t)}if(c[y]){b&&b.packages&&(b.packages=c.sort()[C](","));for(p=0;p<k[y];p++)t=k[p],this.e[":"+t]=[],e&&this.e[":"+t][u](f);if(b||null==O[":"+this.b]||null==O[":"+this.b].versions[":"+a]||google[A].AdditionalParams||!this.l)b&&b.autoloaded||google[A].d("script",this.g(a,b),e);else{c=O[":"+this.b];
  google[this.b]=google[this.b]||{};for(var S in c.properties)S&&":"==S[n](0)&&(google[this.b][S[B](1)]=c.properties[S]);google[A].d("script",google[A][w]+c.path+c.js,e);c.css&&google[A].d("css",google[A][w]+c.path+c.css,e)}this.l&&(this.l=!1,this.c=(new Date)[q](),1!=this.c%100&&(this.c=-1));for(p=0;p<k[y];p++)t=k[p],this.i[":"+t]=!0}});
  U[z].k=function(a){-1!=this.c&&(da("al_"+this.b,"jl."+((new Date)[q]()-this.c),!0),this.c=-1);this.q=this.q.concat(a.components);google[A][this.b]||(google[A][this.b]={});google[A][this.b].packages=this.q.slice(0);for(var b=0;b<a.components[y];b++){this.p[":"+a.components[b]]=!0;this.i[":"+a.components[b]]=!1;var c=this.e[":"+a.components[b]];if(c){for(var e=0;e<c[y];e++)c[e].L(a.components[b]);delete this.e[":"+a.components[b]]}}};U[z].m=function(a,b){return 0==this.v(b)[y]};U[z].s=function(){return!0};
  function W(a){this.K=a;this.n={};this.r=0}W[z].I=function(a){this.r++;this.n[":"+a]=!0};W[z].L=function(a){this.n[":"+a]&&(this.n[":"+a]=!1,this.r--,0==this.r&&g[r](this.K,0))};function V(a,b,c){this.name=a;this.J=b;this.o=c;this.u=this.h=!1;this.j=[];google[A].t[this[x]]=H(this.k,this)}G(V,U);l(V[z],function(a,b){var c=b&&null!=b.callback;c?(this.j[u](b.callback),b.callback="google.loader.callbacks."+this[x]):this.h=!0;b&&b.autoloaded||google[A].d("script",this.g(a,b),c)});V[z].m=function(a,b){return b&&null!=b.callback?this.u:this.h};V[z].k=function(){this.u=!0;for(var a=0;a<this.j[y];a++)g[r](this.j[a],0);this.j=[]};
  var X=function(a,b){return a.string?d(a.string)+"="+d(b):a.regex?b[m](/(^.*$)/,a.regex):""};V[z].g=function(a,b){return this.O(this.w(a),a,b)};
  V[z].O=function(a,b,c){var e="";a.key&&(e+="&"+X(a.key,google[A].ApiKey));a.version&&(e+="&"+X(a.version,b));b=google[A].Secure&&a.ssl?a.ssl:a.uri;if(null!=c)for(var f in c)a.params[f]?e+="&"+X(a.params[f],c[f]):"other_params"==f?e+="&"+c[f]:"base_domain"==f&&(b="http://"+c[f]+a.uri[B](a.uri[v]("/",7)));google[this[x]]={};-1==b[v]("?")&&e&&(e="?"+e[B](1));return b+e};V[z].s=function(a){return this.w(a).deferred};V[z].w=function(a){if(this.o)for(var b=0;b<this.o[y];++b){var c=this.o[b];if((new RegExp(c.pattern)).test(a))return c}return this.J};function T(a,b){this.b=a;this.f=b;this.h=!1}G(T,U);l(T[z],function(a,b){this.h=!0;google[A].d("script",this.g(a,b),!1)});T[z].m=function(){return this.h};T[z].k=function(){};T[z].g=function(a,b){if(!this.f.versions[":"+a]){if(this.f.aliases){var c=this.f.aliases[":"+a];c&&(a=c)}if(!this.f.versions[":"+a])throw I("Module: '"+this.b+"' with version '"+a+"' not found!");}return google[A].GoogleApisBase+"/libs/"+this.b+"/"+a+"/"+this.f.versions[":"+a][b&&b.uncompressed?"uncompressed":"compressed"]};
  T[z].s=function(){return!1};var ea=!1,Y=[],fa=(new Date)[q](),ha=function(){ea||(Q(g,"unload",ga),ea=!0)},ia=function(a,b){ha();if(!(google[A].Secure||google[A].Options&&!1!==google[A].Options.csi)){for(var c=0;c<a[y];c++)a[c]=d(a[c][D]()[m](/[^a-z0-9_.]+/g,"_"));for(c=0;c<b[y];c++)b[c]=d(b[c][D]()[m](/[^a-z0-9_.]+/g,"_"));g[r](H(Z,null,"//gg.google.com/csi?s=uds&v=2&action="+a[C](",")+"&it="+b[C](",")),1E4)}},da=function(a,b,c){c?ia([a],[b]):(ha(),Y[u]("r"+Y[y]+"="+d(a+(b?"|"+b:""))),g[r](ga,5<Y[y]?0:15E3))},ga=function(){if(Y[y]){var a=
  google[A][w];0==a[v]("http:")&&(a=a[m](/^http:/,"https:"));Z(a+"/stats?"+Y[C]("&")+"&nc="+(new Date)[q]()+"_"+((new Date)[q]()-fa));Y.length=0}},Z=function(a){var b=new Image,c=Z.P++;Z.A[c]=b;b.onload=b.onerror=function(){delete Z.A[c]};b.src=a;b=null};Z.A={};Z.P=0;J("google.loader.recordCsiStat",ia);J("google.loader.recordStat",da);J("google.loader.createImageForLogging",Z);

  }) ();google.loader.rm({"specs":[{"name":"books","baseSpec":{"uri":"http://books.google.com/books/api.js","ssl":"https://encrypted.google.com/books/api.js","key":{"string":"key"},"version":{"string":"v"},"deferred":true,"params":{"callback":{"string":"callback"},"language":{"string":"hl"}}}},"feeds",{"name":"friendconnect","baseSpec":{"uri":"http://www.google.com/friendconnect/script/friendconnect.js","ssl":"https://www.google.com/friendconnect/script/friendconnect.js","key":{"string":"key"},"version":{"string":"v"},"deferred":false,"params":{}}},"spreadsheets","identitytoolkit","gdata","ima","visualization",{"name":"sharing","baseSpec":{"uri":"http://www.google.com/s2/sharing/js","ssl":null,"key":{"string":"key"},"version":{"string":"v"},"deferred":false,"params":{"language":{"string":"hl"}}}},{"name":"maps","baseSpec":{"uri":"http://maps.google.com/maps?file\u003dgoogleapi","ssl":"https://maps-api-ssl.google.com/maps?file\u003dgoogleapi","key":{"string":"key"},"version":{"string":"v"},"deferred":true,"params":{"callback":{"regex":"callback\u003d$1\u0026async\u003d2"},"language":{"string":"hl"}}},"customSpecs":[{"uri":"http://maps.googleapis.com/maps/api/js","ssl":"https://maps.googleapis.com/maps/api/js","version":{"string":"v"},"deferred":true,"params":{"callback":{"string":"callback"},"language":{"string":"hl"}},"pattern":"^(3|3..*)$"}]},"search","annotations_v2","payments","wave","orkut",{"name":"annotations","baseSpec":{"uri":"http://www.google.com/reviews/scripts/annotations_bootstrap.js","ssl":null,"key":{"string":"key"},"version":{"string":"v"},"deferred":true,"params":{"callback":{"string":"callback"},"language":{"string":"hl"},"country":{"string":"gl"}}}},"language","earth","picker","ads","elements"]});
  google.loader.rfm({":search":{"versions":{":1":"1",":1.0":"1"},"path":"/api/search/1.0/cb6ef4de1f03dde8c26c6d526f8a1f35/","js":"default+en.I.js","css":"default+en.css","properties":{":JSHash":"cb6ef4de1f03dde8c26c6d526f8a1f35",":NoOldNames":false,":Version":"1.0"}},":language":{"versions":{":1":"1",":1.0":"1"},"path":"/api/language/1.0/ab842e4cebe93c5ab08b2d3db3b8dc59/","js":"default+en.I.js","properties":{":JSHash":"ab842e4cebe93c5ab08b2d3db3b8dc59",":Version":"1.0"}},":feeds":{"versions":{":1":"1",":1.0":"1"},"path":"/api/feeds/1.0/482f2817cdf8982edf2e5669f9e3a627/","js":"default+en.I.js","css":"default+en.css","properties":{":JSHash":"482f2817cdf8982edf2e5669f9e3a627",":Version":"1.0"}},":spreadsheets":{"versions":{":0":"1",":0.4":"1"},"path":"/api/spreadsheets/0.4/87ff7219e9f8a8164006cbf28d5e911a/","js":"default.I.js","properties":{":JSHash":"87ff7219e9f8a8164006cbf28d5e911a",":Version":"0.4"}},":ima":{"versions":{":3":"1",":3.0":"1"},"path":"/api/ima/3.0/28a914332232c9a8ac0ae8da68b1006e/","js":"default.I.js","properties":{":JSHash":"28a914332232c9a8ac0ae8da68b1006e",":Version":"3.0"}},":wave":{"versions":{":1":"1",":1.0":"1"},"path":"/api/wave/1.0/3b6f7573ff78da6602dda5e09c9025bf/","js":"default.I.js","properties":{":JSHash":"3b6f7573ff78da6602dda5e09c9025bf",":Version":"1.0"}},":earth":{"versions":{":1":"1",":1.0":"1"},"path":"/api/earth/1.0/db22e5693e0a8de1f62f3536f5a8d7d3/","js":"default.I.js","properties":{":JSHash":"db22e5693e0a8de1f62f3536f5a8d7d3",":Version":"1.0"}},":annotations":{"versions":{":1":"1",":1.0":"1"},"path":"/api/annotations/1.0/ee29f1a32c343fea662c6e1b58ec6d0d/","js":"default+en.I.js","properties":{":JSHash":"ee29f1a32c343fea662c6e1b58ec6d0d",":Version":"1.0"}},":picker":{"versions":{":1":"1",":1.0":"1"},"path":"/api/picker/1.0/1c635e91b9d0c082c660a42091913907/","js":"default.I.js","css":"default.css","properties":{":JSHash":"1c635e91b9d0c082c660a42091913907",":Version":"1.0"}}});
  google.loader.rpl({":scriptaculous":{"versions":{":1.8.3":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"},":1.9.0":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"},":1.8.2":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"},":1.8.1":{"uncompressed":"scriptaculous.js","compressed":"scriptaculous.js"}},"aliases":{":1.8":"1.8.3",":1":"1.9.0",":1.9":"1.9.0"}},":yui":{"versions":{":2.6.0":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.9.0":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.7.0":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.8.0r4":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.8.2r1":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":2.8.1":{"uncompressed":"build/yuiloader/yuiloader.js","compressed":"build/yuiloader/yuiloader-min.js"},":3.3.0":{"uncompressed":"build/yui/yui.js","compressed":"build/yui/yui-min.js"}},"aliases":{":3":"3.3.0",":2":"2.9.0",":2.7":"2.7.0",":2.8.2":"2.8.2r1",":2.6":"2.6.0",":2.9":"2.9.0",":2.8":"2.8.2r1",":2.8.0":"2.8.0r4",":3.3":"3.3.0"}},":swfobject":{"versions":{":2.1":{"uncompressed":"swfobject_src.js","compressed":"swfobject.js"},":2.2":{"uncompressed":"swfobject_src.js","compressed":"swfobject.js"}},"aliases":{":2":"2.2"}},":webfont":{"versions":{":1.0.28":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.27":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.29":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.12":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.13":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.14":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.15":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.10":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.11":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.2":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.1":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.0":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.6":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.19":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.5":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.18":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.4":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.17":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.16":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.3":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.9":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.21":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.22":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.25":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.26":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.23":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"},":1.0.24":{"uncompressed":"webfont_debug.js","compressed":"webfont.js"}},"aliases":{":1":"1.0.29",":1.0":"1.0.29"}},":ext-core":{"versions":{":3.1.0":{"uncompressed":"ext-core-debug.js","compressed":"ext-core.js"},":3.0.0":{"uncompressed":"ext-core-debug.js","compressed":"ext-core.js"}},"aliases":{":3":"3.1.0",":3.0":"3.0.0",":3.1":"3.1.0"}},":mootools":{"versions":{":1.3.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.1.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.3.0":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.3.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.1.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.3":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.4":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.2.5":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.4.0":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.4.1":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"},":1.4.2":{"uncompressed":"mootools.js","compressed":"mootools-yui-compressed.js"}},"aliases":{":1":"1.1.2",":1.11":"1.1.1",":1.4":"1.4.2",":1.3":"1.3.2",":1.2":"1.2.5",":1.1":"1.1.2"}},":jqueryui":{"versions":{":1.6.0":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.0":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.2":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.1":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.9":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.15":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.14":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.7":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.13":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.8":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.12":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.2":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.5":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.11":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.3":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.10":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.6":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.0":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.7.1":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.4":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.5.3":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.5.2":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.17":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"},":1.8.16":{"uncompressed":"jquery-ui.js","compressed":"jquery-ui.min.js"}},"aliases":{":1.8":"1.8.17",":1.7":"1.7.3",":1.6":"1.6.0",":1":"1.8.17",":1.5":"1.5.3",":1.8.3":"1.8.4"}},":chrome-frame":{"versions":{":1.0.2":{"uncompressed":"CFInstall.js","compressed":"CFInstall.min.js"},":1.0.1":{"uncompressed":"CFInstall.js","compressed":"CFInstall.min.js"},":1.0.0":{"uncompressed":"CFInstall.js","compressed":"CFInstall.min.js"}},"aliases":{":1":"1.0.2",":1.0":"1.0.2"}},":jquery":{"versions":{":1.6.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.3.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.3.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.4":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.3":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.3.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.6.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.2.3":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.7.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.7.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.2.6":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.3":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.4":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.5.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.5.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.0":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.5.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.1":{"uncompressed":"jquery.js","compressed":"jquery.min.js"},":1.4.2":{"uncompressed":"jquery.js","compressed":"jquery.min.js"}},"aliases":{":1.7":"1.7.1",":1.6":"1.6.4",":1":"1.7.1",":1.5":"1.5.2",":1.4":"1.4.4",":1.3":"1.3.2",":1.2":"1.2.6"}},":prototype":{"versions":{":1.7.0.0":{"uncompressed":"prototype.js","compressed":"prototype.js"},":1.6.0.2":{"uncompressed":"prototype.js","compressed":"prototype.js"},":1.6.1.0":{"uncompressed":"prototype.js","compressed":"prototype.js"},":1.6.0.3":{"uncompressed":"prototype.js","compressed":"prototype.js"}},"aliases":{":1.7":"1.7.0.0",":1.6.1":"1.6.1.0",":1":"1.7.0.0",":1.6":"1.6.1.0",":1.7.0":"1.7.0.0",":1.6.0":"1.6.0.3"}},":dojo":{"versions":{":1.3.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.6.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.3.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.1.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.3.2":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.6.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.2.3":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.7.2":{"uncompressed":"dojo/dojo.js.uncompressed.js","compressed":"dojo/dojo.js"},":1.7.0":{"uncompressed":"dojo/dojo.js.uncompressed.js","compressed":"dojo/dojo.js"},":1.7.1":{"uncompressed":"dojo/dojo.js.uncompressed.js","compressed":"dojo/dojo.js"},":1.4.3":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.5.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.5.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.2.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.4.0":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"},":1.4.1":{"uncompressed":"dojo/dojo.xd.js.uncompressed.js","compressed":"dojo/dojo.xd.js"}},"aliases":{":1.7":"1.7.2",":1":"1.6.1",":1.6":"1.6.1",":1.5":"1.5.1",":1.4":"1.4.3",":1.3":"1.3.2",":1.2":"1.2.3",":1.1":"1.1.1"}}});
  }
  google.load('search', '1');
  console.log('pre console.debug(newsSearch);');
  
  
  console.debug(google)
  // Set a callback to call your code when the page loads
  ;
    setTimeout(function() {
      var newsSearch;
      if (google['search'] != null) {
        newsSearch = new google.search.NewsSearch();
        console.log('confirm console.debug(newsSearch);');
        console.debug(newsSearch);
        newsSearch.setSearchCompleteCallback(this, function() {
          console.log('console.debug(newsSearch)');
          return console.debug(newsSearch);
        });
        newsSearch.execute('Barack Obama');
        return google.search.Search.getBranding('branding');
      }
    }, 6000);
    console.log('wtf 2');
    return 0;
    popupOpen = false;
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var tabUrl_hash, tabUrl_hashWordArray;
      if (tabs.length > 0 && (tabs[0].url != null)) {
        if (tabs[0].url.indexOf('chrome-devtools://') !== 0) {
          tabUrl = tabs[0].url;
        } else {
          _set_popupParcel({}, tabUrl, false);
          console.log('chrome-devtools:// has been the only url visited so far');
          return 0;
        }
        tabUrl_hashWordArray = CryptoJS.SHA512(tabUrl);
        tabUrl_hash = tabUrl_hashWordArray.toString(CryptoJS.enc.Base64);
        return chrome.storage.local.get(null, function(allItemsInLocalStorage) {
          if ((allItemsInLocalStorage.persistentUrlHash == null) || allItemsInLocalStorage.persistentUrlHash !== tabUrl_hash) {
            updateBadgeText('');
            chrome.storage.local.set({
              'persistentUrlHash': tabUrl_hash
            }, function() {});
            console.log('popupParcel 123123');
            console.debug(popupParcel);
            return chrome.storage.sync.get(null, function(allItemsInSyncedStorage) {
              console.log('allItemsInSyncedStorage123');
              console.debug(allItemsInSyncedStorage);
              if (allItemsInSyncedStorage.kiwi_userPreferences != null) {
                if (allItemsInSyncedStorage.kiwi_userPreferences.researchMode === 'off') {
                  updateBadgeText('off');
                  console.log('console.debug kiwi_urlsResultsCache');
                  console.debug(kiwi_urlsResultsCache);
                  if (tabUrl === tempResponsesStore.forUrl) {
                    if (kiwi_urlsResultsCache[tabUrl] != null) {
                      _set_popupParcel(kiwi_urlsResultsCache[tabUrl], tabUrl, false);
                      if (allItemsInSyncedStorage['kiwi_servicesInfo'] != null) {
                        refreshBadge(allItemsInSyncedStorage['kiwi_servicesInfo'], kiwi_urlsResultsCache[tabUrl]);
                      }
                    }
                  }
                  return 0;
                }
              }
              return periodicCleanup(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage, function(tabUrl, allItemsInLocalStorage, allItemsInSyncedStorage) {
                var urlSubstring, _i, _len, _ref;
                console.log('in initialize callback');
                if (allItemsInSyncedStorage['kiwi_userPreferences'] == null) {
                  console.log("console.debug allItemsInSyncedStorage['kiwi_userPreferences']");
                  console.debug(allItemsInSyncedStorage['kiwi_userPreferences']);
                  return chrome.storage.sync.set({
                    'kiwi_userPreferences': defaultUserPreferences
                  }, function() {
                    var urlSubstring, _i, _len, _ref;
                    _ref = defaultUserPreferences.urlSubstring_blacklist;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      urlSubstring = _ref[_i];
                      if (tabUrl.indexOf(urlSubstring) !== -1) {
                        updateBadgeText('block');
                        console.log('# user is not interested in results for this url: ' + tabUrl);
                        _set_popupParcel({}, tabUrl, false);
                        return 0;
                      }
                    }
                    return initialize(tabUrl);
                  });
                } else {
                  console.log("allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklist");
                  console.debug(allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklist);
                  _ref = allItemsInSyncedStorage['kiwi_userPreferences'].urlSubstring_blacklist;
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    urlSubstring = _ref[_i];
                    if (tabUrl.indexOf(urlSubstring) !== -1) {
                      updateBadgeText('block');
                      console.log('# user is not interested in results for this url: ' + tabUrl);
                      _set_popupParcel({}, tabUrl, false);
                      return 0;
                    }
                  }
                  return initialize(tabUrl);
                }
              });
            });
          }
        });
      }
    });
  };

  chrome.tabs.onUpdated.addListener(initIfNewURL);

}).call(this);
